{"uid":"6791ca1592458b2","name":"Sale price","fullName":"test_function.test_filters.test_1_filters_price#test_get_filters_price_feed_pm","historyId":"16f4740db08fc22263e30a188400b77a","time":{"start":1662789503259,"stop":1662789503994,"duration":735},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', sale_price_min = None, sale_price_max = 100\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Sale price\"')\n    @allure.title('Sale price')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"sale_price_min, sale_price_max\", [(100, 100), (None, 100), (100, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_price_feed_pm(representation, sale_price_min, sale_price_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"salePriceMin\": sale_price_min,\n                                                                    \"salePriceMax\": sale_price_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_1_filters_price.py:34: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"story","value":"Фильтр по \"Sale price\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_1_filters_price"},{"name":"host","value":"fv-az133-181"},{"name":"thread","value":"2437-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_1_filters_price"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"sale_price_max","value":"100"},{"name":"sale_price_min","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":6,"unknown":0,"total":12},"items":[{"uid":"92e974ee58e85204","reportUrl":"https://golosin.github.io/API-tests/40//#testresult/92e974ee58e85204","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662703593866,"stop":1662703594559,"duration":693}},{"uid":"2dd41283c6422c13","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/2dd41283c6422c13","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617698654,"stop":1662617699553,"duration":899}},{"uid":"3e99e6f88fea0e14","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/3e99e6f88fea0e14","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617520502,"stop":1662617521203,"duration":701}},{"uid":"e9282cc71047df1f","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/e9282cc71047df1f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532716657,"stop":1662532717786,"duration":1129}},{"uid":"96a161ba209d6fdf","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/96a161ba209d6fdf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446442744,"stop":1662446443529,"duration":785}},{"uid":"a584c1daf5647f1c","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/a584c1daf5647f1c","status":"passed","time":{"start":1662359148044,"stop":1662359149323,"duration":1279}},{"uid":"989b3270ef9443e0","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/989b3270ef9443e0","status":"passed","time":{"start":1662270544512,"stop":1662270545885,"duration":1373}},{"uid":"e753d837c4cb69e0","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/e753d837c4cb69e0","status":"passed","time":{"start":1662184015452,"stop":1662184017017,"duration":1565}},{"uid":"bc58fe397b297e46","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/bc58fe397b297e46","status":"passed","time":{"start":1662099257429,"stop":1662099259240,"duration":1811}},{"uid":"a857786c04e0c538","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/a857786c04e0c538","status":"passed","time":{"start":1662012142321,"stop":1662012144160,"duration":1839}},{"uid":"7d6ba329c99e011c","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/7d6ba329c99e011c","status":"passed","time":{"start":1661928382148,"stop":1661928383941,"duration":1793}}]},"tags":[]},"source":"6791ca1592458b2.json","parameterValues":["'WILDBERRIES'","100","None"]}