{"uid":"b73bfa1d5fd935d2","name":"Image","fullName":"test_function.test_filters.test_3_filters_image#test_get_filters_image_rule_policy","historyId":"62aa0244c166eeb48e3b8b16d9421c2e","time":{"start":1662789522339,"stop":1662789523050,"duration":711},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"rule_policy = 'businessPolicyProducts', marketplace = 'WILDBERRIES'\nimages = 'true'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Image\"')\n    @allure.title('Image')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"images\", [\"true\", \"false\"])\n    @pytest.mark.parametrize(\"marketplace\", [\"WILDBERRIES\"])\n    @pytest.mark.parametrize(\"rule_policy\", [\"priceStockRuleProducts\", \"businessPolicyProducts\"])\n    def test_get_filters_image_rule_policy(rule_policy, marketplace, images):\n    \n        x = open(os.path.join(r\"query\", \"query \" + rule_policy + \".txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': rule_policy,\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"images\": images\n                                                                    },\n                                                                    \"marketplace\": marketplace\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data'][rule_policy]['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_3_filters_image.py:71: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"story","value":"Фильтр по \"Image\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_3_filters_image"},{"name":"host","value":"fv-az133-181"},{"name":"thread","value":"2437-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_3_filters_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"images","value":"'true'"},{"name":"marketplace","value":"'WILDBERRIES'"},{"name":"rule_policy","value":"'businessPolicyProducts'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":6,"unknown":0,"total":12},"items":[{"uid":"76f19ae79f9eaf7e","reportUrl":"https://golosin.github.io/API-tests/40//#testresult/76f19ae79f9eaf7e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662703612679,"stop":1662703613430,"duration":751}},{"uid":"4df38a8bcc3a9e0b","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/4df38a8bcc3a9e0b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617721684,"stop":1662617722562,"duration":878}},{"uid":"6eb303bd1d9de788","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/6eb303bd1d9de788","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617538712,"stop":1662617539393,"duration":681}},{"uid":"fc78fafa0048b234","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/fc78fafa0048b234","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532745834,"stop":1662532746940,"duration":1106}},{"uid":"499a96e199e2edf0","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/499a96e199e2edf0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446461485,"stop":1662446462245,"duration":760}},{"uid":"6564ca644b774a50","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/6564ca644b774a50","status":"passed","time":{"start":1662359179739,"stop":1662359180883,"duration":1144}},{"uid":"4d7c3843a6da74aa","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/4d7c3843a6da74aa","status":"passed","time":{"start":1662270577080,"stop":1662270578468,"duration":1388}},{"uid":"36cc85ddf5205ce0","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/36cc85ddf5205ce0","status":"passed","time":{"start":1662184053794,"stop":1662184055226,"duration":1432}},{"uid":"4b0bef11e65c53c1","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/4b0bef11e65c53c1","status":"passed","time":{"start":1662099296262,"stop":1662099297821,"duration":1559}},{"uid":"cdd40d171261a3af","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/cdd40d171261a3af","status":"passed","time":{"start":1662012187871,"stop":1662012189660,"duration":1789}},{"uid":"621e4012923c8795","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/621e4012923c8795","status":"passed","time":{"start":1661928427499,"stop":1661928429320,"duration":1821}}]},"tags":[]},"source":"b73bfa1d5fd935d2.json","parameterValues":["'true'","'WILDBERRIES'","'businessPolicyProducts'"]}