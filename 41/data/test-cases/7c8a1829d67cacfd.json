{"uid":"7c8a1829d67cacfd","name":"Sale price","fullName":"test_function.test_filters.test_1_filters_price#test_get_filters_price_feed_pm","historyId":"db16ac8ea6d622183443e22b0d010cd6","time":{"start":1662789504001,"stop":1662789504702,"duration":701},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', sale_price_min = 100, sale_price_max = None\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Sale price\"')\n    @allure.title('Sale price')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"sale_price_min, sale_price_max\", [(100, 100), (None, 100), (100, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_price_feed_pm(representation, sale_price_min, sale_price_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"salePriceMin\": sale_price_min,\n                                                                    \"salePriceMax\": sale_price_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_1_filters_price.py:34: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"story","value":"Фильтр по \"Sale price\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_1_filters_price"},{"name":"host","value":"fv-az133-181"},{"name":"thread","value":"2437-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_1_filters_price"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"sale_price_max","value":"None"},{"name":"sale_price_min","value":"100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":6,"unknown":0,"total":12},"items":[{"uid":"961d886c7f06bef1","reportUrl":"https://golosin.github.io/API-tests/40//#testresult/961d886c7f06bef1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662703594565,"stop":1662703595265,"duration":700}},{"uid":"e86c8ce88dbfd931","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/e86c8ce88dbfd931","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617699559,"stop":1662617700417,"duration":858}},{"uid":"4c976097fb8735c3","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/4c976097fb8735c3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617521209,"stop":1662617521903,"duration":694}},{"uid":"9cb9761075940cbc","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/9cb9761075940cbc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532717794,"stop":1662532718902,"duration":1108}},{"uid":"57e135bf372c0f31","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/57e135bf372c0f31","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446443535,"stop":1662446444280,"duration":745}},{"uid":"7f5bf42fec861536","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/7f5bf42fec861536","status":"passed","time":{"start":1662359149327,"stop":1662359150678,"duration":1351}},{"uid":"4697e4e2652140c1","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/4697e4e2652140c1","status":"passed","time":{"start":1662270545888,"stop":1662270547336,"duration":1448}},{"uid":"92df987a40168921","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/92df987a40168921","status":"passed","time":{"start":1662184017021,"stop":1662184018587,"duration":1566}},{"uid":"5d79316ecf51995d","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/5d79316ecf51995d","status":"passed","time":{"start":1662099259243,"stop":1662099260863,"duration":1620}},{"uid":"ce0d2eb3b80f695e","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/ce0d2eb3b80f695e","status":"passed","time":{"start":1662012144164,"stop":1662012146176,"duration":2012}},{"uid":"dd3048b7cb8f9e7c","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/dd3048b7cb8f9e7c","status":"passed","time":{"start":1661928383945,"stop":1661928385989,"duration":2044}}]},"tags":[]},"source":"7c8a1829d67cacfd.json","parameterValues":["'WILDBERRIES'","None","100"]}