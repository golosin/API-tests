{"uid":"5cfea92198629d1b","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"23513f4be8e5f79d4614a4470cdcdcbf","time":{"start":1662789510786,"stop":1662789511523,"duration":737},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', stock_min = 2, stock_max = None\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:35: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az133-181"},{"name":"thread","value":"2437-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"},{"name":"stock_max","value":"None"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":6,"unknown":0,"total":12},"items":[{"uid":"e778517662597ae8","reportUrl":"https://golosin.github.io/API-tests/40//#testresult/e778517662597ae8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662703601128,"stop":1662703601907,"duration":779}},{"uid":"1336c8784e7833b6","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/1336c8784e7833b6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617707556,"stop":1662617708445,"duration":889}},{"uid":"7eed81fda417122f","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/7eed81fda417122f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617527520,"stop":1662617528226,"duration":706}},{"uid":"493ce28cbbaf0311","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/493ce28cbbaf0311","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532727820,"stop":1662532728955,"duration":1135}},{"uid":"9308eaf34590c892","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/9308eaf34590c892","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446449957,"stop":1662446450657,"duration":700}},{"uid":"b7262400d554fd60","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/b7262400d554fd60","status":"passed","time":{"start":1662359159959,"stop":1662359160864,"duration":905}},{"uid":"4d09de788fcdf022","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/4d09de788fcdf022","status":"passed","time":{"start":1662270556882,"stop":1662270557773,"duration":891}},{"uid":"5dc5a2bb7c30e42","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/5dc5a2bb7c30e42","status":"passed","time":{"start":1662184030238,"stop":1662184031349,"duration":1111}},{"uid":"7b7c515c13550fd8","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/7b7c515c13550fd8","status":"passed","time":{"start":1662099272119,"stop":1662099273306,"duration":1187}},{"uid":"8fac1d18c5810d45","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/8fac1d18c5810d45","status":"passed","time":{"start":1662012159781,"stop":1662012161235,"duration":1454}},{"uid":"64f7edaa8eee58af","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/64f7edaa8eee58af","status":"passed","time":{"start":1661928399433,"stop":1661928400868,"duration":1435}}]},"tags":[]},"source":"5cfea92198629d1b.json","parameterValues":["'FEED'","None","2"]}