{"uid":"bcf1ab386f73d8ba","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"721fed86dac7424827c27c8f3be62f82","time":{"start":1662789524514,"stop":1662789525231,"duration":717},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\n        elif representation == 'WILDBERRIES':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][18]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az133-181"},{"name":"thread","value":"2437-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":6,"unknown":0,"total":12},"items":[{"uid":"f85c49e8a0d5c724","reportUrl":"https://golosin.github.io/API-tests/40//#testresult/f85c49e8a0d5c724","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662703614838,"stop":1662703615546,"duration":708}},{"uid":"21b3cf81dc16480c","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/21b3cf81dc16480c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617724320,"stop":1662617725212,"duration":892}},{"uid":"f5898649c3712cf4","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/f5898649c3712cf4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617540786,"stop":1662617541496,"duration":710}},{"uid":"32da8d257b3677e2","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/32da8d257b3677e2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532749153,"stop":1662532750258,"duration":1105}},{"uid":"cb31be6e80aaee08","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/cb31be6e80aaee08","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446463697,"stop":1662446464397,"duration":700}},{"uid":"1ba58717b00d930","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/1ba58717b00d930","status":"passed","time":{"start":1662359185030,"stop":1662359188085,"duration":3055}},{"uid":"b0c520f1e33eaf2b","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/b0c520f1e33eaf2b","status":"passed","time":{"start":1662270582697,"stop":1662270585841,"duration":3144}},{"uid":"36ded7f6166131db","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/36ded7f6166131db","status":"passed","time":{"start":1662184060145,"stop":1662184063803,"duration":3658}},{"uid":"510458dcbc55d146","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/510458dcbc55d146","status":"passed","time":{"start":1662099302747,"stop":1662099306543,"duration":3796}},{"uid":"7c6d3eb503cf6bd3","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/7c6d3eb503cf6bd3","status":"passed","time":{"start":1662012195777,"stop":1662012200298,"duration":4521}},{"uid":"665bad0d1f3f819","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/665bad0d1f3f819","status":"passed","time":{"start":1661928435455,"stop":1661928439908,"duration":4453}}]},"tags":[]},"source":"bcf1ab386f73d8ba.json","parameterValues":["'WILDBERRIES'"]}