{"uid":"5b9b2ce2b6c8c825","name":"Image","fullName":"test_function.test_filters.test_3_filters_image#test_get_filters_image_rule_policy","historyId":"29b7ba24f6f2314133d6949a152b6af2","time":{"start":1665469419364,"stop":1665469420051,"duration":687},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"rule_policy = 'businessPolicyProducts', marketplace = 'WILDBERRIES'\nimages = 'false'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Image\"')\n    @allure.title('Image')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"images\", [\"true\", \"false\"])\n    @pytest.mark.parametrize(\"marketplace\", [\"WILDBERRIES\"])\n    @pytest.mark.parametrize(\"rule_policy\", [\"priceStockRuleProducts\", \"businessPolicyProducts\"])\n    def test_get_filters_image_rule_policy(rule_policy, marketplace, images):\n    \n        x = open(os.path.join(r\"query\", \"query \" + rule_policy + \".txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': rule_policy,\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"images\": images\n                                                                    },\n                                                                    \"marketplace\": marketplace\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data'][rule_policy]['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_3_filters_image.py:71: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"story","value":"Фильтр по \"Image\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_3_filters_image"},{"name":"host","value":"fv-az167-86"},{"name":"thread","value":"2450-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_3_filters_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"images","value":"'false'"},{"name":"marketplace","value":"'WILDBERRIES'"},{"name":"rule_policy","value":"'businessPolicyProducts'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":34,"skipped":0,"passed":0,"unknown":0,"total":34},"items":[{"uid":"770b3084a190c51c","reportUrl":"https://golosin.github.io/API-tests/78//#testresult/770b3084a190c51c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665383167024,"stop":1665383167734,"duration":710}},{"uid":"5e78e3d5cea83701","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/5e78e3d5cea83701","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294930323,"stop":1665294931181,"duration":858}},{"uid":"98019926f35bda5d","reportUrl":"https://golosin.github.io/API-tests/76//#testresult/98019926f35bda5d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665208219500,"stop":1665208220364,"duration":864}},{"uid":"9d90481b804e3e2e","reportUrl":"https://golosin.github.io/API-tests/75//#testresult/9d90481b804e3e2e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665122043480,"stop":1665122044160,"duration":680}},{"uid":"1751b651cb110a1f","reportUrl":"https://golosin.github.io/API-tests/74//#testresult/1751b651cb110a1f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665035904935,"stop":1665035905642,"duration":707}},{"uid":"15a16514ae329aa3","reportUrl":"https://golosin.github.io/API-tests/73//#testresult/15a16514ae329aa3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664949877832,"stop":1664949878523,"duration":691}},{"uid":"c8c7be727dce26ab","reportUrl":"https://golosin.github.io/API-tests/72//#testresult/c8c7be727dce26ab","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664863293075,"stop":1664863293757,"duration":682}},{"uid":"e7a62dd4e37aa34e","reportUrl":"https://golosin.github.io/API-tests/71//#testresult/e7a62dd4e37aa34e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664776763712,"stop":1664776764579,"duration":867}},{"uid":"2c35c06a69355c05","reportUrl":"https://golosin.github.io/API-tests/70//#testresult/2c35c06a69355c05","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664690392539,"stop":1664690393639,"duration":1100}},{"uid":"24628fcc4d773567","reportUrl":"https://golosin.github.io/API-tests/68//#testresult/24628fcc4d773567","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664519860934,"stop":1664519862025,"duration":1091}},{"uid":"b80ccb83a68f369c","reportUrl":"https://golosin.github.io/API-tests/67//#testresult/b80ccb83a68f369c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664433541887,"stop":1664433542997,"duration":1110}},{"uid":"79ef0c2057938c6c","reportUrl":"https://golosin.github.io/API-tests/66//#testresult/79ef0c2057938c6c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664346852624,"stop":1664346853526,"duration":902}},{"uid":"3d41b1755669bda9","reportUrl":"https://golosin.github.io/API-tests/65//#testresult/3d41b1755669bda9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664260029356,"stop":1664260030223,"duration":867}},{"uid":"279a81f6bc99a184","reportUrl":"https://golosin.github.io/API-tests/64//#testresult/279a81f6bc99a184","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664173997520,"stop":1664173998210,"duration":690}},{"uid":"e6908195cd8cfce6","reportUrl":"https://golosin.github.io/API-tests/63//#testresult/e6908195cd8cfce6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664085272605,"stop":1664085273542,"duration":937}},{"uid":"5b6f9d9f0c251b9d","reportUrl":"https://golosin.github.io/API-tests/62//#testresult/5b6f9d9f0c251b9d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663999157610,"stop":1663999158731,"duration":1121}},{"uid":"adcf6d34ce056c03","reportUrl":"https://golosin.github.io/API-tests/61//#testresult/adcf6d34ce056c03","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663914348899,"stop":1663914349583,"duration":684}},{"uid":"30f0abc2f7a84397","reportUrl":"https://golosin.github.io/API-tests/60//#testresult/30f0abc2f7a84397","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663828216308,"stop":1663828217190,"duration":882}},{"uid":"4a6e673000bbeb20","reportUrl":"https://golosin.github.io/API-tests/59//#testresult/4a6e673000bbeb20","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663742176002,"stop":1663742177118,"duration":1116}},{"uid":"24fbb0a7b80c95e8","reportUrl":"https://golosin.github.io/API-tests/58//#testresult/24fbb0a7b80c95e8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663655465594,"stop":1663655466474,"duration":880}}]},"tags":[]},"source":"5b9b2ce2b6c8c825.json","parameterValues":["'false'","'WILDBERRIES'","'businessPolicyProducts'"]}