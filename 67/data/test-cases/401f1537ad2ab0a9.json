{"uid":"401f1537ad2ab0a9","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"721fed86dac7424827c27c8f3be62f82","time":{"start":1664433544117,"stop":1664433545210,"duration":1093},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\n        elif representation == 'WILDBERRIES':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][18]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"epic","value":"Тест стенд v.1.1.0"},{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az447-274"},{"name":"thread","value":"2474-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":23,"skipped":0,"passed":0,"unknown":0,"total":23},"items":[{"uid":"c16f67c443f5285a","reportUrl":"https://golosin.github.io/API-tests/66//#testresult/c16f67c443f5285a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664346853977,"stop":1664346854844,"duration":867}},{"uid":"1472f77c0b60abfb","reportUrl":"https://golosin.github.io/API-tests/65//#testresult/1472f77c0b60abfb","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664260031099,"stop":1664260031973,"duration":874}},{"uid":"94873562d01019c5","reportUrl":"https://golosin.github.io/API-tests/64//#testresult/94873562d01019c5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664173998909,"stop":1664173999616,"duration":707}},{"uid":"829e2eaa7e9fb19c","reportUrl":"https://golosin.github.io/API-tests/63//#testresult/829e2eaa7e9fb19c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664085274428,"stop":1664085275294,"duration":866}},{"uid":"5f12287938e0df09","reportUrl":"https://golosin.github.io/API-tests/62//#testresult/5f12287938e0df09","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663999159856,"stop":1663999160972,"duration":1116}},{"uid":"e0e25b2d01ab1af9","reportUrl":"https://golosin.github.io/API-tests/61//#testresult/e0e25b2d01ab1af9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663914350292,"stop":1663914351017,"duration":725}},{"uid":"e18c36b958bd071f","reportUrl":"https://golosin.github.io/API-tests/60//#testresult/e18c36b958bd071f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663828218097,"stop":1663828218996,"duration":899}},{"uid":"a4ebdfc07e45c012","reportUrl":"https://golosin.github.io/API-tests/59//#testresult/a4ebdfc07e45c012","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663742178254,"stop":1663742179376,"duration":1122}},{"uid":"e790fb5a3e0388d3","reportUrl":"https://golosin.github.io/API-tests/58//#testresult/e790fb5a3e0388d3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663655467346,"stop":1663655468225,"duration":879}},{"uid":"6933f9d749aa13fa","reportUrl":"https://golosin.github.io/API-tests/57//#testresult/6933f9d749aa13fa","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663569587391,"stop":1663569588083,"duration":692}},{"uid":"771567a0bfb37434","reportUrl":"https://golosin.github.io/API-tests/56//#testresult/771567a0bfb37434","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663480488814,"stop":1663480489926,"duration":1112}},{"uid":"e1709cb1b4bc1ad9","reportUrl":"https://golosin.github.io/API-tests/55//#testresult/e1709cb1b4bc1ad9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663393961975,"stop":1663393962899,"duration":924}},{"uid":"f0ddef8c0c7a6633","reportUrl":"https://golosin.github.io/API-tests/54//#testresult/f0ddef8c0c7a6633","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663309764917,"stop":1663309765607,"duration":690}},{"uid":"5e105526237f0d3f","reportUrl":"https://golosin.github.io/API-tests/53//#testresult/5e105526237f0d3f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663222541210,"stop":1663222541907,"duration":697}},{"uid":"452bfc951bd6db5a","reportUrl":"https://golosin.github.io/API-tests/52//#testresult/452bfc951bd6db5a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663137102011,"stop":1663137102910,"duration":899}},{"uid":"9d8499d74d668682","reportUrl":"https://golosin.github.io/API-tests/51//#testresult/9d8499d74d668682","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663050987058,"stop":1663050987767,"duration":709}},{"uid":"82c4b32567969f40","reportUrl":"https://golosin.github.io/API-tests/50//#testresult/82c4b32567969f40","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662964787388,"stop":1662964788126,"duration":738}},{"uid":"54be085cfae52ae7","reportUrl":"https://golosin.github.io/API-tests/49//#testresult/54be085cfae52ae7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662875610020,"stop":1662875610702,"duration":682}},{"uid":"531c4c3987630af5","reportUrl":"https://golosin.github.io/API-tests/48//#testresult/531c4c3987630af5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662845427346,"stop":1662845428222,"duration":876}},{"uid":"2bfeac2bf65d6776","reportUrl":"https://golosin.github.io/API-tests/47//#testresult/2bfeac2bf65d6776","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662840111696,"stop":1662840112396,"duration":700}}]},"tags":[]},"source":"401f1537ad2ab0a9.json","parameterValues":["'WILDBERRIES'"]}