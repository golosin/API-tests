{"uid":"415057ae374d66cc","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"23513f4be8e5f79d4614a4470cdcdcbf","time":{"start":1663480467536,"stop":1663480468645,"duration":1109},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', stock_min = 2, stock_max = None\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"story","value":"Фильтр по \"Stock"},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.0.9"},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az83-521"},{"name":"thread","value":"2430-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"},{"name":"stock_max","value":"None"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":0,"unknown":0,"total":12},"items":[{"uid":"31ea11e1463e5fa2","reportUrl":"https://golosin.github.io/API-tests/55//#testresult/31ea11e1463e5fa2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663393945122,"stop":1663393946025,"duration":903}},{"uid":"b12e75bbec649c9d","reportUrl":"https://golosin.github.io/API-tests/54//#testresult/b12e75bbec649c9d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663309751614,"stop":1663309752299,"duration":685}},{"uid":"5a268da52e5b705f","reportUrl":"https://golosin.github.io/API-tests/53//#testresult/5a268da52e5b705f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663222527642,"stop":1663222528350,"duration":708}},{"uid":"acc7e5c9f96f7a33","reportUrl":"https://golosin.github.io/API-tests/52//#testresult/acc7e5c9f96f7a33","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663137084733,"stop":1663137085632,"duration":899}},{"uid":"b96e0c6efa4c3f12","reportUrl":"https://golosin.github.io/API-tests/51//#testresult/b96e0c6efa4c3f12","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663050973276,"stop":1663050974004,"duration":728}},{"uid":"596e8199ecba63c5","reportUrl":"https://golosin.github.io/API-tests/50//#testresult/596e8199ecba63c5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662964773423,"stop":1662964774131,"duration":708}},{"uid":"dede4f527455085a","reportUrl":"https://golosin.github.io/API-tests/49//#testresult/dede4f527455085a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662875596507,"stop":1662875597245,"duration":738}},{"uid":"3aa1382113b173dd","reportUrl":"https://golosin.github.io/API-tests/48//#testresult/3aa1382113b173dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662845410117,"stop":1662845410999,"duration":882}},{"uid":"bab78dc47b28b2c2","reportUrl":"https://golosin.github.io/API-tests/47//#testresult/bab78dc47b28b2c2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662840097813,"stop":1662840098541,"duration":728}},{"uid":"2f2694f461a45127","reportUrl":"https://golosin.github.io/API-tests/46//#testresult/2f2694f461a45127","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662840061982,"stop":1662840062893,"duration":911}},{"uid":"9092a103ddcd07ca","reportUrl":"https://golosin.github.io/API-tests/45//#testresult/9092a103ddcd07ca","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662838758291,"stop":1662838758992,"duration":701}}]},"tags":[]},"source":"415057ae374d66cc.json","parameterValues":["'FEED'","None","2"]}