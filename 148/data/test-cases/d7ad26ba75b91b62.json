{"uid":"d7ad26ba75b91b62","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"dcfc6f447ab1152a67e381672353f11e","time":{"start":1671427938589,"stop":1671427939849,"duration":1260},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:29: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"epic","value":"Тест стенд v.1.1.2.1"},{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az178-813"},{"name":"thread","value":"2467-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":103,"skipped":0,"passed":0,"unknown":0,"total":103},"items":[{"uid":"626733eb82dc0011","reportUrl":"https://golosin.github.io/API-tests/147//#testresult/626733eb82dc0011","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671341531327,"stop":1671341532568,"duration":1241}},{"uid":"233201b616232742","reportUrl":"https://golosin.github.io/API-tests/146//#testresult/233201b616232742","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671255119002,"stop":1671255120028,"duration":1026}},{"uid":"7c27d01ca7db50a","reportUrl":"https://golosin.github.io/API-tests/145//#testresult/7c27d01ca7db50a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671168705533,"stop":1671168706385,"duration":852}},{"uid":"fda91debdb373935","reportUrl":"https://golosin.github.io/API-tests/144//#testresult/fda91debdb373935","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671082331187,"stop":1671082332230,"duration":1043}},{"uid":"fd0a6719ebe6621d","reportUrl":"https://golosin.github.io/API-tests/143//#testresult/fd0a6719ebe6621d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670995915129,"stop":1670995916137,"duration":1008}},{"uid":"6ffeb4d3dfd3c148","reportUrl":"https://golosin.github.io/API-tests/142//#testresult/6ffeb4d3dfd3c148","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670909507083,"stop":1670909507946,"duration":863}},{"uid":"7171ec19ba635eb0","reportUrl":"https://golosin.github.io/API-tests/141//#testresult/7171ec19ba635eb0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670823095609,"stop":1670823096429,"duration":820}},{"uid":"3a3bf3bab0e48214","reportUrl":"https://golosin.github.io/API-tests/140//#testresult/3a3bf3bab0e48214","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670736699745,"stop":1670736700551,"duration":806}},{"uid":"9a1fbbfce4d23138","reportUrl":"https://golosin.github.io/API-tests/139//#testresult/9a1fbbfce4d23138","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670650326768,"stop":1670650327995,"duration":1227}},{"uid":"12052277be617837","reportUrl":"https://golosin.github.io/API-tests/138//#testresult/12052277be617837","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670563905648,"stop":1670563906652,"duration":1004}},{"uid":"893f98ea8da335d7","reportUrl":"https://golosin.github.io/API-tests/137//#testresult/893f98ea8da335d7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670477498552,"stop":1670477499388,"duration":836}},{"uid":"9d3594905f1dd607","reportUrl":"https://golosin.github.io/API-tests/136//#testresult/9d3594905f1dd607","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670391100909,"stop":1670391101774,"duration":865}},{"uid":"4293cc441878ec27","reportUrl":"https://golosin.github.io/API-tests/135//#testresult/4293cc441878ec27","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670304738058,"stop":1670304738920,"duration":862}},{"uid":"8bad16f1002a9cdd","reportUrl":"https://golosin.github.io/API-tests/134//#testresult/8bad16f1002a9cdd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670218323387,"stop":1670218324247,"duration":860}},{"uid":"92e2aaa4d57fef59","reportUrl":"https://golosin.github.io/API-tests/133//#testresult/92e2aaa4d57fef59","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670131908169,"stop":1670131909195,"duration":1026}},{"uid":"f8bec3d2aeccae61","reportUrl":"https://golosin.github.io/API-tests/132//#testresult/f8bec3d2aeccae61","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670045505298,"stop":1670045506142,"duration":844}},{"uid":"956093f79c5c3551","reportUrl":"https://golosin.github.io/API-tests/131//#testresult/956093f79c5c3551","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669959128850,"stop":1669959129848,"duration":998}},{"uid":"c8be3fddcee01bcf","reportUrl":"https://golosin.github.io/API-tests/130//#testresult/c8be3fddcee01bcf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669872852883,"stop":1669872853988,"duration":1105}},{"uid":"b95413a47037f408","reportUrl":"https://golosin.github.io/API-tests/129//#testresult/b95413a47037f408","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669786408640,"stop":1669786409905,"duration":1265}},{"uid":"1d1936a20974b21e","reportUrl":"https://golosin.github.io/API-tests/128//#testresult/1d1936a20974b21e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669699977262,"stop":1669699978380,"duration":1118}}]},"tags":[]},"source":"d7ad26ba75b91b62.json","parameterValues":["'FEED'"]}