{"uid":"91f04d86ee428144","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"c68cd23a5574698c3519dd2ee8880360","time":{"start":1669095297734,"stop":1669095300566,"duration":2832},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = 2, stock_max = 2\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az241-751"},{"name":"thread","value":"2462-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"2"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":76,"skipped":0,"passed":0,"unknown":0,"total":76},"items":[{"uid":"75ce974141469a10","reportUrl":"https://golosin.github.io/API-tests/120//#testresult/75ce974141469a10","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669008905283,"stop":1669008906296,"duration":1013}},{"uid":"2f3c7e8e3827e2ac","reportUrl":"https://golosin.github.io/API-tests/119//#testresult/2f3c7e8e3827e2ac","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668922460570,"stop":1668922461679,"duration":1109}},{"uid":"de98759383df131e","reportUrl":"https://golosin.github.io/API-tests/118//#testresult/de98759383df131e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668836033322,"stop":1668836034436,"duration":1114}},{"uid":"6385d2dfdbe765a8","reportUrl":"https://golosin.github.io/API-tests/117//#testresult/6385d2dfdbe765a8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668749680704,"stop":1668749681575,"duration":871}},{"uid":"7a22c15c41b905a6","reportUrl":"https://golosin.github.io/API-tests/116//#testresult/7a22c15c41b905a6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668663307969,"stop":1668663309971,"duration":2002}},{"uid":"484eb12f94d38be7","reportUrl":"https://golosin.github.io/API-tests/115//#testresult/484eb12f94d38be7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668576861814,"stop":1668576862682,"duration":868}},{"uid":"c1c30d2d6ca43eca","reportUrl":"https://golosin.github.io/API-tests/114//#testresult/c1c30d2d6ca43eca","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668490446394,"stop":1668490447276,"duration":882}},{"uid":"cdf684e18ce98d5e","reportUrl":"https://golosin.github.io/API-tests/113//#testresult/cdf684e18ce98d5e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668404576322,"stop":1668404577016,"duration":694}},{"uid":"c9982229f96b38ee","reportUrl":"https://golosin.github.io/API-tests/112//#testresult/c9982229f96b38ee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668317835831,"stop":1668317836943,"duration":1112}},{"uid":"436786556a2f3c2d","reportUrl":"https://golosin.github.io/API-tests/111//#testresult/436786556a2f3c2d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668231388907,"stop":1668231389622,"duration":715}},{"uid":"9d9704a53e76763d","reportUrl":"https://golosin.github.io/API-tests/110//#testresult/9d9704a53e76763d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668145227988,"stop":1668145228674,"duration":686}},{"uid":"d557ef1afb9b585b","reportUrl":"https://golosin.github.io/API-tests/109//#testresult/d557ef1afb9b585b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668058927672,"stop":1668058928539,"duration":867}},{"uid":"f1db5c543978bbcc","reportUrl":"https://golosin.github.io/API-tests/108//#testresult/f1db5c543978bbcc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667972709461,"stop":1667972710224,"duration":763}},{"uid":"f940f356f0de1da9","reportUrl":"https://golosin.github.io/API-tests/107//#testresult/f940f356f0de1da9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667886129731,"stop":1667886130826,"duration":1095}},{"uid":"8f8ab1a02f4b0f81","reportUrl":"https://golosin.github.io/API-tests/106//#testresult/8f8ab1a02f4b0f81","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667799837379,"stop":1667799838247,"duration":868}},{"uid":"df0e3702c861097f","reportUrl":"https://golosin.github.io/API-tests/105//#testresult/df0e3702c861097f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667712865956,"stop":1667712866656,"duration":700}},{"uid":"f85226ae4791a78c","reportUrl":"https://golosin.github.io/API-tests/104//#testresult/f85226ae4791a78c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667626468659,"stop":1667626469374,"duration":715}},{"uid":"cc4d4e66ae44f2b2","reportUrl":"https://golosin.github.io/API-tests/103//#testresult/cc4d4e66ae44f2b2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667540442361,"stop":1667540443229,"duration":868}},{"uid":"9aeb20a9deabbc64","reportUrl":"https://golosin.github.io/API-tests/102//#testresult/9aeb20a9deabbc64","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667454001368,"stop":1667454002267,"duration":899}},{"uid":"78b53f299c8bf6c1","reportUrl":"https://golosin.github.io/API-tests/101//#testresult/78b53f299c8bf6c1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667368608938,"stop":1667368609666,"duration":728}}]},"tags":[]},"source":"91f04d86ee428144.json","parameterValues":["'WILDBERRIES'","2","2"]}