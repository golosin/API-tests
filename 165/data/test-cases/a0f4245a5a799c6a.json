{"uid":"a0f4245a5a799c6a","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"0a5a4bf656bca2f0f8d8bc380e808fdc","time":{"start":1672896701505,"stop":1672896702760,"duration":1255},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = None, stock_max = 2\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"epic","value":"Тест стенд v.1.1.4"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az257-896"},{"name":"thread","value":"2481-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"2"},{"name":"stock_min","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":120,"skipped":0,"passed":0,"unknown":0,"total":120},"items":[{"uid":"f6f2463688ca9d0b","reportUrl":"https://golosin.github.io/API-tests/164//#testresult/f6f2463688ca9d0b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672810310209,"stop":1672810311237,"duration":1028}},{"uid":"1384cda56cc10cf","reportUrl":"https://golosin.github.io/API-tests/163//#testresult/1384cda56cc10cf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672723892744,"stop":1672723893603,"duration":859}},{"uid":"cdfe5e6417878cb1","reportUrl":"https://golosin.github.io/API-tests/162//#testresult/cdfe5e6417878cb1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672637490038,"stop":1672637490879,"duration":841}},{"uid":"86b2090ec7a9a289","reportUrl":"https://golosin.github.io/API-tests/161//#testresult/86b2090ec7a9a289","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672551084357,"stop":1672551085171,"duration":814}},{"uid":"54eb16ff48924324","reportUrl":"https://golosin.github.io/API-tests/160//#testresult/54eb16ff48924324","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672464688711,"stop":1672464689545,"duration":834}},{"uid":"51f754ca31d7f087","reportUrl":"https://golosin.github.io/API-tests/159//#testresult/51f754ca31d7f087","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672378306256,"stop":1672378307317,"duration":1061}},{"uid":"4a67687be725ce14","reportUrl":"https://golosin.github.io/API-tests/158//#testresult/4a67687be725ce14","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672291894826,"stop":1672291895846,"duration":1020}},{"uid":"4c54a0b3ea79a5b9","reportUrl":"https://golosin.github.io/API-tests/157//#testresult/4c54a0b3ea79a5b9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672205489105,"stop":1672205489938,"duration":833}},{"uid":"67cacfd4e0d31888","reportUrl":"https://golosin.github.io/API-tests/156//#testresult/67cacfd4e0d31888","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672119100910,"stop":1672119102159,"duration":1249}},{"uid":"ecdb03a98b067c77","reportUrl":"https://golosin.github.io/API-tests/155//#testresult/ecdb03a98b067c77","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672032705448,"stop":1672032706545,"duration":1097}},{"uid":"3d4327f7ef6965f9","reportUrl":"https://golosin.github.io/API-tests/154//#testresult/3d4327f7ef6965f9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671946303369,"stop":1671946304207,"duration":838}},{"uid":"b33359657d682af3","reportUrl":"https://golosin.github.io/API-tests/153//#testresult/b33359657d682af3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671859889445,"stop":1671859890302,"duration":857}},{"uid":"f112542b98a1c661","reportUrl":"https://golosin.github.io/API-tests/152//#testresult/f112542b98a1c661","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671773503953,"stop":1671773505072,"duration":1119}},{"uid":"4e2023e5017b20b4","reportUrl":"https://golosin.github.io/API-tests/151//#testresult/4e2023e5017b20b4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671687093564,"stop":1671687094411,"duration":847}},{"uid":"f32e37e0a8db70e0","reportUrl":"https://golosin.github.io/API-tests/150//#testresult/f32e37e0a8db70e0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671600688704,"stop":1671600689587,"duration":883}},{"uid":"f3d57364e9ecaf78","reportUrl":"https://golosin.github.io/API-tests/149//#testresult/f3d57364e9ecaf78","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671514300222,"stop":1671514301079,"duration":857}},{"uid":"abdbb265de1f5344","reportUrl":"https://golosin.github.io/API-tests/148//#testresult/abdbb265de1f5344","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671427918170,"stop":1671427919433,"duration":1263}},{"uid":"e928b6a17da0d291","reportUrl":"https://golosin.github.io/API-tests/147//#testresult/e928b6a17da0d291","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671341511141,"stop":1671341512379,"duration":1238}},{"uid":"96163ff0a8963456","reportUrl":"https://golosin.github.io/API-tests/146//#testresult/96163ff0a8963456","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671255102837,"stop":1671255103827,"duration":990}},{"uid":"62e2e713f4a1ac91","reportUrl":"https://golosin.github.io/API-tests/145//#testresult/62e2e713f4a1ac91","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671168690539,"stop":1671168691423,"duration":884}}]},"tags":[]},"source":"a0f4245a5a799c6a.json","parameterValues":["'WILDBERRIES'","2","None"]}