{"uid":"36ad89124c26f88","name":"Sale price","fullName":"test_function.test_filters.test_1_filters_price#test_get_filters_price_rule_policy","historyId":"f3cf124cbbb3621002070f43f4102db9","time":{"start":1662703598281,"stop":1662703598990,"duration":709},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"rule_policy = 'businessPolicyProducts', marketplace = 'WILDBERRIES'\nsale_price_min = None, sale_price_max = 100\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Sale price\"')\n    @allure.title('Sale price')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"sale_price_min, sale_price_max\", [(100, 100), (None, 100), (100, None)])\n    @pytest.mark.parametrize(\"marketplace\", [\"WILDBERRIES\"])\n    @pytest.mark.parametrize(\"rule_policy\", [\"priceStockRuleProducts\", \"businessPolicyProducts\"])\n    def test_get_filters_price_rule_policy(rule_policy, marketplace, sale_price_min, sale_price_max):\n    \n        x = open(os.path.join(r\"query\", \"query \" + rule_policy + \".txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': rule_policy,\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"salePriceMin\": sale_price_min,\n                                                                    \"salePriceMax\": sale_price_max\n                                                                    },\n                                                                    \"marketplace\": marketplace\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data'][rule_policy]['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_1_filters_price.py:74: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Sale price\""},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_1_filters_price"},{"name":"host","value":"fv-az311-617"},{"name":"thread","value":"2409-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_1_filters_price"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"marketplace","value":"'WILDBERRIES'"},{"name":"rule_policy","value":"'businessPolicyProducts'"},{"name":"sale_price_max","value":"100"},{"name":"sale_price_min","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":6,"unknown":0,"total":11},"items":[{"uid":"20ad90407be0c75e","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/20ad90407be0c75e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617704023,"stop":1662617704878,"duration":855}},{"uid":"eea6181ad735c3da","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/eea6181ad735c3da","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617524699,"stop":1662617525402,"duration":703}},{"uid":"d1a65ee4d807a7de","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/d1a65ee4d807a7de","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532723340,"stop":1662532724438,"duration":1098}},{"uid":"ae42b8c9e7d6b36f","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/ae42b8c9e7d6b36f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446447101,"stop":1662446447800,"duration":699}},{"uid":"970571f131f9b867","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/970571f131f9b867","status":"passed","time":{"start":1662359155439,"stop":1662359156709,"duration":1270}},{"uid":"be73097f91120f61","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/be73097f91120f61","status":"passed","time":{"start":1662270552093,"stop":1662270553372,"duration":1279}},{"uid":"30aeb8f451503e65","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/30aeb8f451503e65","status":"passed","time":{"start":1662184024520,"stop":1662184026145,"duration":1625}},{"uid":"f36c5269a8afa4ea","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/f36c5269a8afa4ea","status":"passed","time":{"start":1662099266525,"stop":1662099268080,"duration":1555}},{"uid":"f3297d35390a75b0","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/f3297d35390a75b0","status":"passed","time":{"start":1662012152992,"stop":1662012154782,"duration":1790}},{"uid":"98fd7f985d7e7636","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/98fd7f985d7e7636","status":"passed","time":{"start":1661928392903,"stop":1661928394652,"duration":1749}}]},"tags":[]},"source":"36ad89124c26f88.json","parameterValues":["'WILDBERRIES'","'businessPolicyProducts'","100","None"]}