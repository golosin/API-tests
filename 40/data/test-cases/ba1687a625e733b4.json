{"uid":"ba1687a625e733b4","name":"Images","fullName":"test_function.test_filters.test_3_filters_image#test_get_filters_image_feed_pm","historyId":"e6e727eb93bcc590a8779268ef835775","time":{"start":1662703609106,"stop":1662703609845,"duration":739},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', images = 'false'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Image\"')\n    @allure.title('Images')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"images\", [\"true\", \"false\"])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_image_feed_pm(representation, images):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"images\": images\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_3_filters_image.py:33: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Image\""},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_3_filters_image"},{"name":"host","value":"fv-az311-617"},{"name":"thread","value":"2409-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_3_filters_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"images","value":"'false'"},{"name":"representation","value":"'FEED'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":6,"unknown":0,"total":11},"items":[{"uid":"d36dd700fabb15b1","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/d36dd700fabb15b1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617717286,"stop":1662617718169,"duration":883}},{"uid":"3724d866a11d953f","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/3724d866a11d953f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617535170,"stop":1662617535879,"duration":709}},{"uid":"2b56ecf41daea3c","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/2b56ecf41daea3c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532740184,"stop":1662532741278,"duration":1094}},{"uid":"94d4287152f0ec6","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/94d4287152f0ec6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446457859,"stop":1662446458562,"duration":703}},{"uid":"ef6add01f594140e","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/ef6add01f594140e","status":"passed","time":{"start":1662359173274,"stop":1662359174389,"duration":1115}},{"uid":"72094125786d1e67","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/72094125786d1e67","status":"passed","time":{"start":1662270570444,"stop":1662270571541,"duration":1097}},{"uid":"cf68bedbb3f5924","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/cf68bedbb3f5924","status":"passed","time":{"start":1662184046095,"stop":1662184047419,"duration":1324}},{"uid":"b301259ca8d29499","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/b301259ca8d29499","status":"passed","time":{"start":1662099288385,"stop":1662099289745,"duration":1360}},{"uid":"3bb80dcdb2f23eda","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/3bb80dcdb2f23eda","status":"passed","time":{"start":1662012178639,"stop":1662012180258,"duration":1619}},{"uid":"7bb31d40b8ec23b7","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/7bb31d40b8ec23b7","status":"passed","time":{"start":1661928418383,"stop":1661928420097,"duration":1714}}]},"tags":[]},"source":"ba1687a625e733b4.json","parameterValues":["'false'","'FEED'"]}