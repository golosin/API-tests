{"uid":"fe7da859e2408bd9","name":"Sale price","fullName":"test_function.test_filters.test_1_filters_price#test_get_filters_price_rule_policy","historyId":"59d6d9d3bed6bcda51fe94ecd2ef87a6","time":{"start":1662703597560,"stop":1662703598275,"duration":715},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"rule_policy = 'businessPolicyProducts', marketplace = 'WILDBERRIES'\nsale_price_min = 100, sale_price_max = 100\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Sale price\"')\n    @allure.title('Sale price')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"sale_price_min, sale_price_max\", [(100, 100), (None, 100), (100, None)])\n    @pytest.mark.parametrize(\"marketplace\", [\"WILDBERRIES\"])\n    @pytest.mark.parametrize(\"rule_policy\", [\"priceStockRuleProducts\", \"businessPolicyProducts\"])\n    def test_get_filters_price_rule_policy(rule_policy, marketplace, sale_price_min, sale_price_max):\n    \n        x = open(os.path.join(r\"query\", \"query \" + rule_policy + \".txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': rule_policy,\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"salePriceMin\": sale_price_min,\n                                                                    \"salePriceMax\": sale_price_max\n                                                                    },\n                                                                    \"marketplace\": marketplace\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data'][rule_policy]['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_1_filters_price.py:74: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Sale price\""},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_1_filters_price"},{"name":"host","value":"fv-az311-617"},{"name":"thread","value":"2409-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_1_filters_price"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"marketplace","value":"'WILDBERRIES'"},{"name":"rule_policy","value":"'businessPolicyProducts'"},{"name":"sale_price_max","value":"100"},{"name":"sale_price_min","value":"100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":6,"unknown":0,"total":11},"items":[{"uid":"4fa6ee55c103b9d9","reportUrl":"https://golosin.github.io/API-tests/39//#testresult/4fa6ee55c103b9d9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617703143,"stop":1662617704017,"duration":874}},{"uid":"8ab21fb0880e4688","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/8ab21fb0880e4688","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617524009,"stop":1662617524692,"duration":683}},{"uid":"81773ecfc64f3aee","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/81773ecfc64f3aee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532722224,"stop":1662532723332,"duration":1108}},{"uid":"841bf4ca10ddb679","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/841bf4ca10ddb679","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446446393,"stop":1662446447094,"duration":701}},{"uid":"fcc7ca428dba72a5","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/fcc7ca428dba72a5","status":"passed","time":{"start":1662359154325,"stop":1662359155435,"duration":1110}},{"uid":"66377f42ec338195","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/66377f42ec338195","status":"passed","time":{"start":1662270550997,"stop":1662270552090,"duration":1093}},{"uid":"d32b844108097654","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/d32b844108097654","status":"passed","time":{"start":1662184023151,"stop":1662184024516,"duration":1365}},{"uid":"1c8765626c5ae8d8","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/1c8765626c5ae8d8","status":"passed","time":{"start":1662099265251,"stop":1662099266521,"duration":1270}},{"uid":"1f5f462830913b0c","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/1f5f462830913b0c","status":"passed","time":{"start":1662012151435,"stop":1662012152988,"duration":1553}},{"uid":"6abcfb14a767aa40","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/6abcfb14a767aa40","status":"passed","time":{"start":1661928391313,"stop":1661928392899,"duration":1586}}]},"tags":[]},"source":"fe7da859e2408bd9.json","parameterValues":["'WILDBERRIES'","'businessPolicyProducts'","100","100"]}