{"uid":"abc8f3251442df3e","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"721fed86dac7424827c27c8f3be62f82","time":{"start":1672119122343,"stop":1672119123612,"duration":1269},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\n        elif representation == 'WILDBERRIES':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][18]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.3"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az456-801"},{"name":"thread","value":"2519-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":111,"skipped":0,"passed":0,"unknown":0,"total":111},"items":[{"uid":"bd05ccc3ee7891e7","reportUrl":"https://golosin.github.io/API-tests/155//#testresult/bd05ccc3ee7891e7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672032725075,"stop":1672032726198,"duration":1123}},{"uid":"44420e5f077fb507","reportUrl":"https://golosin.github.io/API-tests/154//#testresult/44420e5f077fb507","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671946317510,"stop":1671946318327,"duration":817}},{"uid":"aa7d069d4f80e78c","reportUrl":"https://golosin.github.io/API-tests/153//#testresult/aa7d069d4f80e78c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671859903940,"stop":1671859904772,"duration":832}},{"uid":"28735533ef7cb9d3","reportUrl":"https://golosin.github.io/API-tests/152//#testresult/28735533ef7cb9d3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671773523337,"stop":1671773524531,"duration":1194}},{"uid":"e5786f29535dea42","reportUrl":"https://golosin.github.io/API-tests/151//#testresult/e5786f29535dea42","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671687108133,"stop":1671687108970,"duration":837}},{"uid":"855b545e4de76191","reportUrl":"https://golosin.github.io/API-tests/150//#testresult/855b545e4de76191","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671600703542,"stop":1671600704740,"duration":1198}},{"uid":"3bb0310180fefe00","reportUrl":"https://golosin.github.io/API-tests/149//#testresult/3bb0310180fefe00","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671514314933,"stop":1671514315792,"duration":859}},{"uid":"ba6cd92716fb0617","reportUrl":"https://golosin.github.io/API-tests/148//#testresult/ba6cd92716fb0617","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671427939858,"stop":1671427941124,"duration":1266}},{"uid":"804f9073ad3695d6","reportUrl":"https://golosin.github.io/API-tests/147//#testresult/804f9073ad3695d6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671341532577,"stop":1671341533851,"duration":1274}},{"uid":"e7d90334ad35b479","reportUrl":"https://golosin.github.io/API-tests/146//#testresult/e7d90334ad35b479","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671255120035,"stop":1671255121029,"duration":994}},{"uid":"91c537c2048139ff","reportUrl":"https://golosin.github.io/API-tests/145//#testresult/91c537c2048139ff","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671168706394,"stop":1671168707270,"duration":876}},{"uid":"66fb10e7a660302a","reportUrl":"https://golosin.github.io/API-tests/144//#testresult/66fb10e7a660302a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671082332239,"stop":1671082333293,"duration":1054}},{"uid":"1d99b24541e4a185","reportUrl":"https://golosin.github.io/API-tests/143//#testresult/1d99b24541e4a185","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670995916144,"stop":1670995917131,"duration":987}},{"uid":"18d21b32c9c8359","reportUrl":"https://golosin.github.io/API-tests/142//#testresult/18d21b32c9c8359","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670909507954,"stop":1670909508835,"duration":881}},{"uid":"4e3ff42d5f513cf4","reportUrl":"https://golosin.github.io/API-tests/141//#testresult/4e3ff42d5f513cf4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670823096436,"stop":1670823097315,"duration":879}},{"uid":"d30ad997b66ca5aa","reportUrl":"https://golosin.github.io/API-tests/140//#testresult/d30ad997b66ca5aa","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670736700558,"stop":1670736701369,"duration":811}},{"uid":"6de4a301cc47d025","reportUrl":"https://golosin.github.io/API-tests/139//#testresult/6de4a301cc47d025","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670650328002,"stop":1670650329237,"duration":1235}},{"uid":"a5827b511f22ec1c","reportUrl":"https://golosin.github.io/API-tests/138//#testresult/a5827b511f22ec1c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670563906659,"stop":1670563907705,"duration":1046}},{"uid":"e522cc7831a094e2","reportUrl":"https://golosin.github.io/API-tests/137//#testresult/e522cc7831a094e2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670477499395,"stop":1670477500287,"duration":892}},{"uid":"6532d380d1f9443a","reportUrl":"https://golosin.github.io/API-tests/136//#testresult/6532d380d1f9443a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670391101781,"stop":1670391102668,"duration":887}}]},"tags":[]},"source":"abc8f3251442df3e.json","parameterValues":["'WILDBERRIES'"]}