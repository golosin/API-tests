{"uid":"3d4327f7ef6965f9","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"0a5a4bf656bca2f0f8d8bc380e808fdc","time":{"start":1671946303369,"stop":1671946304207,"duration":838},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = None, stock_max = 2\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.2.3"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az351-823"},{"name":"thread","value":"2517-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"2"},{"name":"stock_min","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":109,"skipped":0,"passed":0,"unknown":0,"total":109},"items":[{"uid":"b33359657d682af3","reportUrl":"https://golosin.github.io/API-tests/153//#testresult/b33359657d682af3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671859889445,"stop":1671859890302,"duration":857}},{"uid":"f112542b98a1c661","reportUrl":"https://golosin.github.io/API-tests/152//#testresult/f112542b98a1c661","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671773503953,"stop":1671773505072,"duration":1119}},{"uid":"4e2023e5017b20b4","reportUrl":"https://golosin.github.io/API-tests/151//#testresult/4e2023e5017b20b4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671687093564,"stop":1671687094411,"duration":847}},{"uid":"f32e37e0a8db70e0","reportUrl":"https://golosin.github.io/API-tests/150//#testresult/f32e37e0a8db70e0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671600688704,"stop":1671600689587,"duration":883}},{"uid":"f3d57364e9ecaf78","reportUrl":"https://golosin.github.io/API-tests/149//#testresult/f3d57364e9ecaf78","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671514300222,"stop":1671514301079,"duration":857}},{"uid":"abdbb265de1f5344","reportUrl":"https://golosin.github.io/API-tests/148//#testresult/abdbb265de1f5344","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671427918170,"stop":1671427919433,"duration":1263}},{"uid":"e928b6a17da0d291","reportUrl":"https://golosin.github.io/API-tests/147//#testresult/e928b6a17da0d291","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671341511141,"stop":1671341512379,"duration":1238}},{"uid":"96163ff0a8963456","reportUrl":"https://golosin.github.io/API-tests/146//#testresult/96163ff0a8963456","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671255102837,"stop":1671255103827,"duration":990}},{"uid":"62e2e713f4a1ac91","reportUrl":"https://golosin.github.io/API-tests/145//#testresult/62e2e713f4a1ac91","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671168690539,"stop":1671168691423,"duration":884}},{"uid":"e3b5c4edcdde3f5f","reportUrl":"https://golosin.github.io/API-tests/144//#testresult/e3b5c4edcdde3f5f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671082314278,"stop":1671082315292,"duration":1014}},{"uid":"ed2a2934cc93cad0","reportUrl":"https://golosin.github.io/API-tests/143//#testresult/ed2a2934cc93cad0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670995898141,"stop":1670995899259,"duration":1118}},{"uid":"8e0e9a84e0952caf","reportUrl":"https://golosin.github.io/API-tests/142//#testresult/8e0e9a84e0952caf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670909493040,"stop":1670909493935,"duration":895}},{"uid":"cbe45e461e080019","reportUrl":"https://golosin.github.io/API-tests/141//#testresult/cbe45e461e080019","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670823082359,"stop":1670823083169,"duration":810}},{"uid":"d7213a768f0ce0f9","reportUrl":"https://golosin.github.io/API-tests/140//#testresult/d7213a768f0ce0f9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670736686500,"stop":1670736687348,"duration":848}},{"uid":"b9467193ac845e15","reportUrl":"https://golosin.github.io/API-tests/139//#testresult/b9467193ac845e15","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670650306785,"stop":1670650308068,"duration":1283}},{"uid":"39c88a6c0671aab8","reportUrl":"https://golosin.github.io/API-tests/138//#testresult/39c88a6c0671aab8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670563889250,"stop":1670563890260,"duration":1010}},{"uid":"bbd167f921ff2226","reportUrl":"https://golosin.github.io/API-tests/137//#testresult/bbd167f921ff2226","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670477484991,"stop":1670477485838,"duration":847}},{"uid":"1b4cb87a3e0447f4","reportUrl":"https://golosin.github.io/API-tests/136//#testresult/1b4cb87a3e0447f4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670391086913,"stop":1670391087873,"duration":960}},{"uid":"bb47d0477d85874d","reportUrl":"https://golosin.github.io/API-tests/135//#testresult/bb47d0477d85874d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670304723623,"stop":1670304724531,"duration":908}},{"uid":"c146604615a08caf","reportUrl":"https://golosin.github.io/API-tests/134//#testresult/c146604615a08caf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670218309107,"stop":1670218309990,"duration":883}}]},"tags":[]},"source":"3d4327f7ef6965f9.json","parameterValues":["'WILDBERRIES'","2","None"]}