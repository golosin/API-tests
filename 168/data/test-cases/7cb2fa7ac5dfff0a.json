{"uid":"7cb2fa7ac5dfff0a","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"721fed86dac7424827c27c8f3be62f82","time":{"start":1673155900944,"stop":1673155901777,"duration":833},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\n        elif representation == 'WILDBERRIES':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][18]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.4"},{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az563-993"},{"name":"thread","value":"2510-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":123,"skipped":0,"passed":0,"unknown":0,"total":123},"items":[{"uid":"77ddb2057f0bcb25","reportUrl":"https://golosin.github.io/API-tests/167//#testresult/77ddb2057f0bcb25","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1673069501451,"stop":1673069502317,"duration":866}},{"uid":"86310135fd15bc54","reportUrl":"https://golosin.github.io/API-tests/166//#testresult/86310135fd15bc54","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672983104273,"stop":1672983105109,"duration":836}},{"uid":"abac1d87b533d9f3","reportUrl":"https://golosin.github.io/API-tests/165//#testresult/abac1d87b533d9f3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672896722742,"stop":1672896723976,"duration":1234}},{"uid":"e7dc109b4b26741f","reportUrl":"https://golosin.github.io/API-tests/164//#testresult/e7dc109b4b26741f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672810327785,"stop":1672810328809,"duration":1024}},{"uid":"8cef6a639948ff2a","reportUrl":"https://golosin.github.io/API-tests/163//#testresult/8cef6a639948ff2a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672723907414,"stop":1672723908262,"duration":848}},{"uid":"c37e4ed8a70cda02","reportUrl":"https://golosin.github.io/API-tests/162//#testresult/c37e4ed8a70cda02","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672637504404,"stop":1672637505254,"duration":850}},{"uid":"e23c07764a745063","reportUrl":"https://golosin.github.io/API-tests/161//#testresult/e23c07764a745063","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672551098197,"stop":1672551099015,"duration":818}},{"uid":"aad1d07b13cc8295","reportUrl":"https://golosin.github.io/API-tests/160//#testresult/aad1d07b13cc8295","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672464703132,"stop":1672464703977,"duration":845}},{"uid":"d0eb0c92db8f6643","reportUrl":"https://golosin.github.io/API-tests/159//#testresult/d0eb0c92db8f6643","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672378324303,"stop":1672378325345,"duration":1042}},{"uid":"646d7491709afb0f","reportUrl":"https://golosin.github.io/API-tests/158//#testresult/646d7491709afb0f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672291912243,"stop":1672291913247,"duration":1004}},{"uid":"4205b4541b54b6e4","reportUrl":"https://golosin.github.io/API-tests/157//#testresult/4205b4541b54b6e4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672205503400,"stop":1672205504237,"duration":837}},{"uid":"abc8f3251442df3e","reportUrl":"https://golosin.github.io/API-tests/156//#testresult/abc8f3251442df3e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672119122343,"stop":1672119123612,"duration":1269}},{"uid":"bd05ccc3ee7891e7","reportUrl":"https://golosin.github.io/API-tests/155//#testresult/bd05ccc3ee7891e7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1672032725075,"stop":1672032726198,"duration":1123}},{"uid":"44420e5f077fb507","reportUrl":"https://golosin.github.io/API-tests/154//#testresult/44420e5f077fb507","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671946317510,"stop":1671946318327,"duration":817}},{"uid":"aa7d069d4f80e78c","reportUrl":"https://golosin.github.io/API-tests/153//#testresult/aa7d069d4f80e78c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671859903940,"stop":1671859904772,"duration":832}},{"uid":"28735533ef7cb9d3","reportUrl":"https://golosin.github.io/API-tests/152//#testresult/28735533ef7cb9d3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671773523337,"stop":1671773524531,"duration":1194}},{"uid":"e5786f29535dea42","reportUrl":"https://golosin.github.io/API-tests/151//#testresult/e5786f29535dea42","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671687108133,"stop":1671687108970,"duration":837}},{"uid":"855b545e4de76191","reportUrl":"https://golosin.github.io/API-tests/150//#testresult/855b545e4de76191","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671600703542,"stop":1671600704740,"duration":1198}},{"uid":"3bb0310180fefe00","reportUrl":"https://golosin.github.io/API-tests/149//#testresult/3bb0310180fefe00","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671514314933,"stop":1671514315792,"duration":859}},{"uid":"ba6cd92716fb0617","reportUrl":"https://golosin.github.io/API-tests/148//#testresult/ba6cd92716fb0617","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671427939858,"stop":1671427941124,"duration":1266}}]},"tags":[]},"source":"7cb2fa7ac5dfff0a.json","parameterValues":["'WILDBERRIES'"]}