{"uid":"5b2fd9e413910d35","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"f3558b5b710adc3c9b4bfbd0f01bb5d8","time":{"start":1662875612078,"stop":1662875612771,"duration":693},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:29: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"feature","value":"Фильтры"},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az191-239"},{"name":"thread","value":"2505-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":0,"unknown":0,"total":5},"items":[{"uid":"10ce3965c8a0c842","reportUrl":"https://golosin.github.io/API-tests/48//#testresult/10ce3965c8a0c842","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662845430071,"stop":1662845430954,"duration":883}},{"uid":"818334755b4dee21","reportUrl":"https://golosin.github.io/API-tests/47//#testresult/818334755b4dee21","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662840113849,"stop":1662840114567,"duration":718}},{"uid":"a038a421b4f0973d","reportUrl":"https://golosin.github.io/API-tests/46//#testresult/a038a421b4f0973d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662840082079,"stop":1662840082968,"duration":889}},{"uid":"ae94fd5c96cd42cb","reportUrl":"https://golosin.github.io/API-tests/45//#testresult/ae94fd5c96cd42cb","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662838774156,"stop":1662838774851,"duration":695}}]},"tags":[]},"source":"5b2fd9e413910d35.json","parameterValues":["'FEED'"]}