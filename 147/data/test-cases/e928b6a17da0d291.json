{"uid":"e928b6a17da0d291","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"0a5a4bf656bca2f0f8d8bc380e808fdc","time":{"start":1671341511141,"stop":1671341512379,"duration":1238},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = None, stock_max = 2\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"epic","value":"Тест стенд v.1.1.2.1"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az572-625"},{"name":"thread","value":"2551-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"2"},{"name":"stock_min","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":102,"skipped":0,"passed":0,"unknown":0,"total":102},"items":[{"uid":"96163ff0a8963456","reportUrl":"https://golosin.github.io/API-tests/146//#testresult/96163ff0a8963456","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671255102837,"stop":1671255103827,"duration":990}},{"uid":"62e2e713f4a1ac91","reportUrl":"https://golosin.github.io/API-tests/145//#testresult/62e2e713f4a1ac91","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671168690539,"stop":1671168691423,"duration":884}},{"uid":"e3b5c4edcdde3f5f","reportUrl":"https://golosin.github.io/API-tests/144//#testresult/e3b5c4edcdde3f5f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671082314278,"stop":1671082315292,"duration":1014}},{"uid":"ed2a2934cc93cad0","reportUrl":"https://golosin.github.io/API-tests/143//#testresult/ed2a2934cc93cad0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670995898141,"stop":1670995899259,"duration":1118}},{"uid":"8e0e9a84e0952caf","reportUrl":"https://golosin.github.io/API-tests/142//#testresult/8e0e9a84e0952caf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670909493040,"stop":1670909493935,"duration":895}},{"uid":"cbe45e461e080019","reportUrl":"https://golosin.github.io/API-tests/141//#testresult/cbe45e461e080019","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670823082359,"stop":1670823083169,"duration":810}},{"uid":"d7213a768f0ce0f9","reportUrl":"https://golosin.github.io/API-tests/140//#testresult/d7213a768f0ce0f9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670736686500,"stop":1670736687348,"duration":848}},{"uid":"b9467193ac845e15","reportUrl":"https://golosin.github.io/API-tests/139//#testresult/b9467193ac845e15","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670650306785,"stop":1670650308068,"duration":1283}},{"uid":"39c88a6c0671aab8","reportUrl":"https://golosin.github.io/API-tests/138//#testresult/39c88a6c0671aab8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670563889250,"stop":1670563890260,"duration":1010}},{"uid":"bbd167f921ff2226","reportUrl":"https://golosin.github.io/API-tests/137//#testresult/bbd167f921ff2226","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670477484991,"stop":1670477485838,"duration":847}},{"uid":"1b4cb87a3e0447f4","reportUrl":"https://golosin.github.io/API-tests/136//#testresult/1b4cb87a3e0447f4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670391086913,"stop":1670391087873,"duration":960}},{"uid":"bb47d0477d85874d","reportUrl":"https://golosin.github.io/API-tests/135//#testresult/bb47d0477d85874d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670304723623,"stop":1670304724531,"duration":908}},{"uid":"c146604615a08caf","reportUrl":"https://golosin.github.io/API-tests/134//#testresult/c146604615a08caf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670218309107,"stop":1670218309990,"duration":883}},{"uid":"9425430868a1a4","reportUrl":"https://golosin.github.io/API-tests/133//#testresult/9425430868a1a4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670131891258,"stop":1670131892286,"duration":1028}},{"uid":"f991bdeb516941be","reportUrl":"https://golosin.github.io/API-tests/132//#testresult/f991bdeb516941be","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670045491397,"stop":1670045492325,"duration":928}},{"uid":"d826bda3b6ab79c","reportUrl":"https://golosin.github.io/API-tests/131//#testresult/d826bda3b6ab79c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669959111958,"stop":1669959112982,"duration":1024}},{"uid":"aba9d3e85536fbee","reportUrl":"https://golosin.github.io/API-tests/130//#testresult/aba9d3e85536fbee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669872834786,"stop":1669872835886,"duration":1100}},{"uid":"79ef972a959883af","reportUrl":"https://golosin.github.io/API-tests/129//#testresult/79ef972a959883af","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669786390047,"stop":1669786391324,"duration":1277}},{"uid":"f414fe7d7b0ee636","reportUrl":"https://golosin.github.io/API-tests/128//#testresult/f414fe7d7b0ee636","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669699959553,"stop":1669699960654,"duration":1101}},{"uid":"d3a277383c9b6ea9","reportUrl":"https://golosin.github.io/API-tests/127//#testresult/d3a277383c9b6ea9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669613553764,"stop":1669613554451,"duration":687}}]},"tags":[]},"source":"e928b6a17da0d291.json","parameterValues":["'WILDBERRIES'","2","None"]}