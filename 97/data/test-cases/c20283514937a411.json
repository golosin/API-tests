{"uid":"c20283514937a411","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"f9ead6112a5139ded03988774bdd2dd2","time":{"start":1667022050353,"stop":1667022051249,"duration":896},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', stock_min = 2, stock_max = 2\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"story","value":"Фильтр по \"Stock"},{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az77-974"},{"name":"thread","value":"2413-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"},{"name":"stock_max","value":"2"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":52,"skipped":0,"passed":0,"unknown":0,"total":52},"items":[{"uid":"b904b805e4da367d","reportUrl":"https://golosin.github.io/API-tests/96//#testresult/b904b805e4da367d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666935977099,"stop":1666935977978,"duration":879}},{"uid":"f6f381deb2abd0e1","reportUrl":"https://golosin.github.io/API-tests/95//#testresult/f6f381deb2abd0e1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666849477305,"stop":1666849478002,"duration":697}},{"uid":"a448707b81232456","reportUrl":"https://golosin.github.io/API-tests/94//#testresult/a448707b81232456","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666763255819,"stop":1666763256516,"duration":697}},{"uid":"37310074f159e056","reportUrl":"https://golosin.github.io/API-tests/93//#testresult/37310074f159e056","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666679833968,"stop":1666679834705,"duration":737}},{"uid":"101b6027b60a537f","reportUrl":"https://golosin.github.io/API-tests/92//#testresult/101b6027b60a537f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666593691580,"stop":1666593692272,"duration":692}},{"uid":"8af5bf5cdb210af2","reportUrl":"https://golosin.github.io/API-tests/91//#testresult/8af5bf5cdb210af2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666504777664,"stop":1666504778374,"duration":710}},{"uid":"6ed2a5a8b35395dd","reportUrl":"https://golosin.github.io/API-tests/90//#testresult/6ed2a5a8b35395dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666418262825,"stop":1666418263703,"duration":878}},{"uid":"18d9b742561e0e3a","reportUrl":"https://golosin.github.io/API-tests/89//#testresult/18d9b742561e0e3a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666332216910,"stop":1666332217629,"duration":719}},{"uid":"2954a24be18e0e81","reportUrl":"https://golosin.github.io/API-tests/88//#testresult/2954a24be18e0e81","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666245435331,"stop":1666245436034,"duration":703}},{"uid":"c49880aaabe2e9e3","reportUrl":"https://golosin.github.io/API-tests/87//#testresult/c49880aaabe2e9e3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666161746060,"stop":1666161746846,"duration":786}},{"uid":"11028027f0e7cb03","reportUrl":"https://golosin.github.io/API-tests/86//#testresult/11028027f0e7cb03","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666075138845,"stop":1666075139530,"duration":685}},{"uid":"adf07d684bf4602d","reportUrl":"https://golosin.github.io/API-tests/85//#testresult/adf07d684bf4602d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665988639594,"stop":1665988640702,"duration":1108}},{"uid":"998b4820e1c6f0e5","reportUrl":"https://golosin.github.io/API-tests/84//#testresult/998b4820e1c6f0e5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665899915775,"stop":1665899916776,"duration":1001}},{"uid":"37c9742df83911fe","reportUrl":"https://golosin.github.io/API-tests/83//#testresult/37c9742df83911fe","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665813722496,"stop":1665813723362,"duration":866}},{"uid":"4f329a029b3882bc","reportUrl":"https://golosin.github.io/API-tests/82//#testresult/4f329a029b3882bc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665729117379,"stop":1665729118128,"duration":749}},{"uid":"279ca6a5b46832f","reportUrl":"https://golosin.github.io/API-tests/81//#testresult/279ca6a5b46832f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665641728764,"stop":1665641729438,"duration":674}},{"uid":"b07c40fd6155155a","reportUrl":"https://golosin.github.io/API-tests/80//#testresult/b07c40fd6155155a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665554487915,"stop":1665554489020,"duration":1105}},{"uid":"2572bd25a8f76e9c","reportUrl":"https://golosin.github.io/API-tests/79//#testresult/2572bd25a8f76e9c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665469406064,"stop":1665469406740,"duration":676}},{"uid":"41e762a5ef592941","reportUrl":"https://golosin.github.io/API-tests/78//#testresult/41e762a5ef592941","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665383153303,"stop":1665383154009,"duration":706}},{"uid":"55f88e480673b86c","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/55f88e480673b86c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294913729,"stop":1665294914588,"duration":859}}]},"tags":[]},"source":"c20283514937a411.json","parameterValues":["'FEED'","2","2"]}