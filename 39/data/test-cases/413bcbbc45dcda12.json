{"uid":"413bcbbc45dcda12","name":"Images","fullName":"test_function.test_filters.test_3_filters_image#test_get_filters_image_feed_pm","historyId":"01791090049ae0d727ddbcfdda7810d9","time":{"start":1662617716391,"stop":1662617717280,"duration":889},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', images = 'true'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Image\"')\n    @allure.title('Images')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"images\", [\"true\", \"false\"])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_image_feed_pm(representation, images):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"images\": images\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_3_filters_image.py:33: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Image\""},{"name":"epic","value":"Тест стенд v.1.0.8"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_3_filters_image"},{"name":"host","value":"fv-az343-405"},{"name":"thread","value":"2430-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_3_filters_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"images","value":"'true'"},{"name":"representation","value":"'FEED'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":6,"unknown":0,"total":10},"items":[{"uid":"f3f3952a5d4c1dd9","reportUrl":"https://golosin.github.io/API-tests/38//#testresult/f3f3952a5d4c1dd9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662617534480,"stop":1662617535163,"duration":683}},{"uid":"dfb8566060b4e686","reportUrl":"https://golosin.github.io/API-tests/37//#testresult/dfb8566060b4e686","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662532739084,"stop":1662532740177,"duration":1093}},{"uid":"fc626e63f5370481","reportUrl":"https://golosin.github.io/API-tests/36//#testresult/fc626e63f5370481","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662446457162,"stop":1662446457854,"duration":692}},{"uid":"846363e5bbbcd267","reportUrl":"https://golosin.github.io/API-tests/35//#testresult/846363e5bbbcd267","status":"passed","time":{"start":1662359172213,"stop":1662359173271,"duration":1058}},{"uid":"fcb6abb68c10a272","reportUrl":"https://golosin.github.io/API-tests/34//#testresult/fcb6abb68c10a272","status":"passed","time":{"start":1662270569251,"stop":1662270570441,"duration":1190}},{"uid":"43cc29faca3ec239","reportUrl":"https://golosin.github.io/API-tests/33//#testresult/43cc29faca3ec239","status":"passed","time":{"start":1662184044724,"stop":1662184046092,"duration":1368}},{"uid":"4f336263e32b691d","reportUrl":"https://golosin.github.io/API-tests/32//#testresult/4f336263e32b691d","status":"passed","time":{"start":1662099286969,"stop":1662099288382,"duration":1413}},{"uid":"ff9b093220b1558b","reportUrl":"https://golosin.github.io/API-tests/31//#testresult/ff9b093220b1558b","status":"passed","time":{"start":1662012176873,"stop":1662012178635,"duration":1762}},{"uid":"4bdeabae622ef01c","reportUrl":"https://golosin.github.io/API-tests/30//#testresult/4bdeabae622ef01c","status":"passed","time":{"start":1661928416734,"stop":1661928418379,"duration":1645}}]},"tags":[]},"source":"413bcbbc45dcda12.json","parameterValues":["'true'","'FEED'"]}