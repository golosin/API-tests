{"uid":"b23bb5241797b19c","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"89764c0620f8a4cd02275f46d5feb195","time":{"start":1664690399235,"stop":1664690400340,"duration":1105},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\n        elif representation == 'WILDBERRIES':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][17]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"epic","value":"Тест стенд v.1.1.0"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az255-793"},{"name":"thread","value":"2450-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":25,"skipped":0,"passed":0,"unknown":0,"total":25},"items":[{"uid":"1a7e955da5bafaeb","reportUrl":"https://golosin.github.io/API-tests/68//#testresult/1a7e955da5bafaeb","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664519867589,"stop":1664519868685,"duration":1096}},{"uid":"589d814a2dd0dd6f","reportUrl":"https://golosin.github.io/API-tests/67//#testresult/589d814a2dd0dd6f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664433548553,"stop":1664433549663,"duration":1110}},{"uid":"4c118ad55084dd0b","reportUrl":"https://golosin.github.io/API-tests/66//#testresult/4c118ad55084dd0b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664346857497,"stop":1664346858348,"duration":851}},{"uid":"e61ed00a16015a7b","reportUrl":"https://golosin.github.io/API-tests/65//#testresult/e61ed00a16015a7b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664260034668,"stop":1664260035535,"duration":867}},{"uid":"6107dc91e5bfed4e","reportUrl":"https://golosin.github.io/API-tests/64//#testresult/6107dc91e5bfed4e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664174001764,"stop":1664174002457,"duration":693}},{"uid":"4a0c3392af6219e2","reportUrl":"https://golosin.github.io/API-tests/63//#testresult/4a0c3392af6219e2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664085277988,"stop":1664085278882,"duration":894}},{"uid":"8bcffe46e4753ba1","reportUrl":"https://golosin.github.io/API-tests/62//#testresult/8bcffe46e4753ba1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663999164327,"stop":1663999165440,"duration":1113}},{"uid":"71025e1ab73fd801","reportUrl":"https://golosin.github.io/API-tests/61//#testresult/71025e1ab73fd801","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663914353132,"stop":1663914353817,"duration":685}},{"uid":"b9f6899d558fb247","reportUrl":"https://golosin.github.io/API-tests/60//#testresult/b9f6899d558fb247","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663828221642,"stop":1663828222560,"duration":918}},{"uid":"72f2d90a3d91baaf","reportUrl":"https://golosin.github.io/API-tests/59//#testresult/72f2d90a3d91baaf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663742182753,"stop":1663742183849,"duration":1096}},{"uid":"1ad5a0485bbae599","reportUrl":"https://golosin.github.io/API-tests/58//#testresult/1ad5a0485bbae599","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663655470878,"stop":1663655471755,"duration":877}},{"uid":"47f273deab6323db","reportUrl":"https://golosin.github.io/API-tests/57//#testresult/47f273deab6323db","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663569590163,"stop":1663569590852,"duration":689}},{"uid":"542026d86946701a","reportUrl":"https://golosin.github.io/API-tests/56//#testresult/542026d86946701a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663480493333,"stop":1663480494468,"duration":1135}},{"uid":"7efc243b13dda949","reportUrl":"https://golosin.github.io/API-tests/55//#testresult/7efc243b13dda949","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663393965587,"stop":1663393966456,"duration":869}},{"uid":"d975eaa2bf2bfeb6","reportUrl":"https://golosin.github.io/API-tests/54//#testresult/d975eaa2bf2bfeb6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663309767707,"stop":1663309768389,"duration":682}},{"uid":"266a0dee87b770b5","reportUrl":"https://golosin.github.io/API-tests/53//#testresult/266a0dee87b770b5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663222544056,"stop":1663222544757,"duration":701}},{"uid":"2c51d75b45546e66","reportUrl":"https://golosin.github.io/API-tests/52//#testresult/2c51d75b45546e66","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663137105638,"stop":1663137106524,"duration":886}},{"uid":"c77d3a9d45a31191","reportUrl":"https://golosin.github.io/API-tests/51//#testresult/c77d3a9d45a31191","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663050989921,"stop":1663050990629,"duration":708}},{"uid":"744f4188ec2b0b1c","reportUrl":"https://golosin.github.io/API-tests/50//#testresult/744f4188ec2b0b1c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662964790272,"stop":1662964790982,"duration":710}},{"uid":"7f8cc4c6cd83ed82","reportUrl":"https://golosin.github.io/API-tests/49//#testresult/7f8cc4c6cd83ed82","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1662875612780,"stop":1662875613486,"duration":706}}]},"tags":[]},"source":"b23bb5241797b19c.json","parameterValues":["'WILDBERRIES'"]}