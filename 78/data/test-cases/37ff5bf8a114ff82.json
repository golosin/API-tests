{"uid":"37ff5bf8a114ff82","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"dcfc6f447ab1152a67e381672353f11e","time":{"start":1665383167740,"stop":1665383168444,"duration":704},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:29: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"story","value":"Фильтр по \"Brand\""},{"name":"feature","value":"Фильтры"},{"name":"epic","value":"Тест стенд v.1.1.0"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az177-244"},{"name":"thread","value":"2547-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":33,"skipped":0,"passed":0,"unknown":0,"total":33},"items":[{"uid":"ce302ff3ba7d5b9f","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/ce302ff3ba7d5b9f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294931187,"stop":1665294932088,"duration":901}},{"uid":"833fc66523526495","reportUrl":"https://golosin.github.io/API-tests/76//#testresult/833fc66523526495","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665208220372,"stop":1665208221224,"duration":852}},{"uid":"74854852ead9e9ee","reportUrl":"https://golosin.github.io/API-tests/75//#testresult/74854852ead9e9ee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665122044167,"stop":1665122044843,"duration":676}},{"uid":"885896b1d20b6365","reportUrl":"https://golosin.github.io/API-tests/74//#testresult/885896b1d20b6365","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665035905648,"stop":1665035906344,"duration":696}},{"uid":"621128964af68b24","reportUrl":"https://golosin.github.io/API-tests/73//#testresult/621128964af68b24","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664949878530,"stop":1664949879229,"duration":699}},{"uid":"199b14d1d862c58a","reportUrl":"https://golosin.github.io/API-tests/72//#testresult/199b14d1d862c58a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664863293764,"stop":1664863294454,"duration":690}},{"uid":"538827c3ab80eab6","reportUrl":"https://golosin.github.io/API-tests/71//#testresult/538827c3ab80eab6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664776764586,"stop":1664776765455,"duration":869}},{"uid":"9820da514a8b38ce","reportUrl":"https://golosin.github.io/API-tests/70//#testresult/9820da514a8b38ce","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664690393647,"stop":1664690394749,"duration":1102}},{"uid":"b3f331b71a1c4699","reportUrl":"https://golosin.github.io/API-tests/68//#testresult/b3f331b71a1c4699","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664519862033,"stop":1664519863136,"duration":1103}},{"uid":"54687d52f0186a21","reportUrl":"https://golosin.github.io/API-tests/67//#testresult/54687d52f0186a21","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664433543005,"stop":1664433544106,"duration":1101}},{"uid":"a4fbe939655dec09","reportUrl":"https://golosin.github.io/API-tests/66//#testresult/a4fbe939655dec09","status":"broken","statusDetails":"requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","time":{"start":1664346853532,"stop":1664346853776,"duration":244}},{"uid":"55262ea963d79281","reportUrl":"https://golosin.github.io/API-tests/65//#testresult/55262ea963d79281","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664260030232,"stop":1664260031090,"duration":858}},{"uid":"16b13ece6c00add9","reportUrl":"https://golosin.github.io/API-tests/64//#testresult/16b13ece6c00add9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664173998217,"stop":1664173998902,"duration":685}},{"uid":"7accb292e421c8ee","reportUrl":"https://golosin.github.io/API-tests/63//#testresult/7accb292e421c8ee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664085273548,"stop":1664085274421,"duration":873}},{"uid":"1190e53e7cac3f41","reportUrl":"https://golosin.github.io/API-tests/62//#testresult/1190e53e7cac3f41","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663999158739,"stop":1663999159847,"duration":1108}},{"uid":"571c1e524fb064da","reportUrl":"https://golosin.github.io/API-tests/61//#testresult/571c1e524fb064da","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663914349590,"stop":1663914350284,"duration":694}},{"uid":"40c31545e283922b","reportUrl":"https://golosin.github.io/API-tests/60//#testresult/40c31545e283922b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663828217196,"stop":1663828218090,"duration":894}},{"uid":"8155af6810c6c843","reportUrl":"https://golosin.github.io/API-tests/59//#testresult/8155af6810c6c843","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663742177126,"stop":1663742178244,"duration":1118}},{"uid":"58c09d51d751b3a5","reportUrl":"https://golosin.github.io/API-tests/58//#testresult/58c09d51d751b3a5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663655466480,"stop":1663655467340,"duration":860}},{"uid":"97b085644e1756f4","reportUrl":"https://golosin.github.io/API-tests/57//#testresult/97b085644e1756f4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663569586707,"stop":1663569587383,"duration":676}}]},"tags":[]},"source":"37ff5bf8a114ff82.json","parameterValues":["'FEED'"]}