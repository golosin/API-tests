{"uid":"91077551b84702e2","name":"Images","fullName":"test_function.test_filters.test_3_filters_image#test_get_filters_image_feed_pm","historyId":"01791090049ae0d727ddbcfdda7810d9","time":{"start":1665383162011,"stop":1665383162737,"duration":726},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', images = 'true'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Image\"')\n    @allure.title('Images')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"images\", [\"true\", \"false\"])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_image_feed_pm(representation, images):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"images\": images\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_3_filters_image.py:33: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Image\""},{"name":"epic","value":"Тест стенд v.1.1.0"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_3_filters_image"},{"name":"host","value":"fv-az177-244"},{"name":"thread","value":"2547-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_3_filters_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"images","value":"'true'"},{"name":"representation","value":"'FEED'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":33,"skipped":0,"passed":0,"unknown":0,"total":33},"items":[{"uid":"a65ff7aff84cd875","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/a65ff7aff84cd875","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294924202,"stop":1665294925065,"duration":863}},{"uid":"d0a315a24ec4884e","reportUrl":"https://golosin.github.io/API-tests/76//#testresult/d0a315a24ec4884e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665208213339,"stop":1665208214206,"duration":867}},{"uid":"88dfc0f6082e044","reportUrl":"https://golosin.github.io/API-tests/75//#testresult/88dfc0f6082e044","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665122038673,"stop":1665122039354,"duration":681}},{"uid":"e8b6e82fe93aa9c5","reportUrl":"https://golosin.github.io/API-tests/74//#testresult/e8b6e82fe93aa9c5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665035899952,"stop":1665035900649,"duration":697}},{"uid":"589ceec748adaf41","reportUrl":"https://golosin.github.io/API-tests/73//#testresult/589ceec748adaf41","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664949872932,"stop":1664949873629,"duration":697}},{"uid":"bc1bb4258262f021","reportUrl":"https://golosin.github.io/API-tests/72//#testresult/bc1bb4258262f021","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664863288224,"stop":1664863288918,"duration":694}},{"uid":"f8c398dd1e9de3dd","reportUrl":"https://golosin.github.io/API-tests/71//#testresult/f8c398dd1e9de3dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664776757461,"stop":1664776758339,"duration":878}},{"uid":"f94f39f2f07285bb","reportUrl":"https://golosin.github.io/API-tests/70//#testresult/f94f39f2f07285bb","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664690384713,"stop":1664690385824,"duration":1111}},{"uid":"d4d9c700576dfb27","reportUrl":"https://golosin.github.io/API-tests/68//#testresult/d4d9c700576dfb27","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664519853147,"stop":1664519854250,"duration":1103}},{"uid":"100dc2a806fa21d0","reportUrl":"https://golosin.github.io/API-tests/67//#testresult/100dc2a806fa21d0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664433534089,"stop":1664433535194,"duration":1105}},{"uid":"18fd3eb1ba35ec44","reportUrl":"https://golosin.github.io/API-tests/66//#testresult/18fd3eb1ba35ec44","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664346846464,"stop":1664346847330,"duration":866}},{"uid":"bb629ffebc0cdd1e","reportUrl":"https://golosin.github.io/API-tests/65//#testresult/bb629ffebc0cdd1e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664260023212,"stop":1664260024072,"duration":860}},{"uid":"b2c6baa4cb4e2b07","reportUrl":"https://golosin.github.io/API-tests/64//#testresult/b2c6baa4cb4e2b07","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664173992553,"stop":1664173993261,"duration":708}},{"uid":"aa3f8c3388593532","reportUrl":"https://golosin.github.io/API-tests/63//#testresult/aa3f8c3388593532","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664085266343,"stop":1664085267244,"duration":901}},{"uid":"e009b8f270484a6a","reportUrl":"https://golosin.github.io/API-tests/62//#testresult/e009b8f270484a6a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663999149791,"stop":1663999150891,"duration":1100}},{"uid":"6e42b066aef2715e","reportUrl":"https://golosin.github.io/API-tests/61//#testresult/6e42b066aef2715e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663914343982,"stop":1663914344670,"duration":688}},{"uid":"ae65f5f317a686af","reportUrl":"https://golosin.github.io/API-tests/60//#testresult/ae65f5f317a686af","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663828210041,"stop":1663828210941,"duration":900}},{"uid":"f695915157f86b24","reportUrl":"https://golosin.github.io/API-tests/59//#testresult/f695915157f86b24","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663742168087,"stop":1663742169200,"duration":1113}},{"uid":"8f4219e80e988d5e","reportUrl":"https://golosin.github.io/API-tests/58//#testresult/8f4219e80e988d5e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663655459439,"stop":1663655460311,"duration":872}},{"uid":"1542ef5af68e55d3","reportUrl":"https://golosin.github.io/API-tests/57//#testresult/1542ef5af68e55d3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663569581214,"stop":1663569581886,"duration":672}}]},"tags":[]},"source":"91077551b84702e2.json","parameterValues":["'true'","'FEED'"]}