{"uid":"1303efbd4a861435","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"89764c0620f8a4cd02275f46d5feb195","time":{"start":1668836060403,"stop":1668836061783,"duration":1380},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\n        elif representation == 'WILDBERRIES':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][17]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az377-287"},{"name":"thread","value":"2391-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":73,"skipped":0,"passed":0,"unknown":0,"total":73},"items":[{"uid":"2b309c347aaf9dee","reportUrl":"https://golosin.github.io/API-tests/117//#testresult/2b309c347aaf9dee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668749700892,"stop":1668749701834,"duration":942}},{"uid":"3f4ecc0eddb74784","reportUrl":"https://golosin.github.io/API-tests/116//#testresult/3f4ecc0eddb74784","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668663331592,"stop":1668663332481,"duration":889}},{"uid":"ea80311184d85239","reportUrl":"https://golosin.github.io/API-tests/115//#testresult/ea80311184d85239","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668576882091,"stop":1668576882964,"duration":873}},{"uid":"4bbab22e87f6bbc6","reportUrl":"https://golosin.github.io/API-tests/114//#testresult/4bbab22e87f6bbc6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668490466513,"stop":1668490467443,"duration":930}},{"uid":"601d63102d87cd0e","reportUrl":"https://golosin.github.io/API-tests/113//#testresult/601d63102d87cd0e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668404592252,"stop":1668404592936,"duration":684}},{"uid":"20055a9724e4e4dd","reportUrl":"https://golosin.github.io/API-tests/112//#testresult/20055a9724e4e4dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668317860784,"stop":1668317861908,"duration":1124}},{"uid":"e57624b3d6099255","reportUrl":"https://golosin.github.io/API-tests/111//#testresult/e57624b3d6099255","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668231404410,"stop":1668231405099,"duration":689}},{"uid":"b0465813449166f5","reportUrl":"https://golosin.github.io/API-tests/110//#testresult/b0465813449166f5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668145244196,"stop":1668145244883,"duration":687}},{"uid":"de5b338c39d61da9","reportUrl":"https://golosin.github.io/API-tests/109//#testresult/de5b338c39d61da9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668058947446,"stop":1668058948312,"duration":866}},{"uid":"1204bcab5ead7d1e","reportUrl":"https://golosin.github.io/API-tests/108//#testresult/1204bcab5ead7d1e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667972726107,"stop":1667972726830,"duration":723}},{"uid":"4f25b48c68c6f88a","reportUrl":"https://golosin.github.io/API-tests/107//#testresult/4f25b48c68c6f88a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667886153923,"stop":1667886155021,"duration":1098}},{"uid":"572c296dc5cbf03e","reportUrl":"https://golosin.github.io/API-tests/106//#testresult/572c296dc5cbf03e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667799856529,"stop":1667799857401,"duration":872}},{"uid":"ab621f3a91372b20","reportUrl":"https://golosin.github.io/API-tests/105//#testresult/ab621f3a91372b20","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667712881577,"stop":1667712882278,"duration":701}},{"uid":"bac322332e2cec7e","reportUrl":"https://golosin.github.io/API-tests/104//#testresult/bac322332e2cec7e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667626484758,"stop":1667626485478,"duration":720}},{"uid":"2300d5673b27a58e","reportUrl":"https://golosin.github.io/API-tests/103//#testresult/2300d5673b27a58e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667540461853,"stop":1667540462749,"duration":896}},{"uid":"36b3be337ae0e35e","reportUrl":"https://golosin.github.io/API-tests/102//#testresult/36b3be337ae0e35e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667454021087,"stop":1667454022017,"duration":930}},{"uid":"22e1a7180c68d415","reportUrl":"https://golosin.github.io/API-tests/101//#testresult/22e1a7180c68d415","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667368625095,"stop":1667368625805,"duration":710}},{"uid":"d4f6e165da30a837","reportUrl":"https://golosin.github.io/API-tests/100//#testresult/d4f6e165da30a837","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667282442765,"stop":1667282443465,"duration":700}},{"uid":"60e3015d4737c45f","reportUrl":"https://golosin.github.io/API-tests/99//#testresult/60e3015d4737c45f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667195442857,"stop":1667195443733,"duration":876}},{"uid":"7a7817439649d725","reportUrl":"https://golosin.github.io/API-tests/98//#testresult/7a7817439649d725","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667108564826,"stop":1667108565726,"duration":900}}]},"tags":[]},"source":"1303efbd4a861435.json","parameterValues":["'WILDBERRIES'"]}