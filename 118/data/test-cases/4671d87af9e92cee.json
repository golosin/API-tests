{"uid":"4671d87af9e92cee","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"b1ad4e9b518d5e42ac697e9a109c8071","time":{"start":1668836036006,"stop":1668836037112,"duration":1106},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = 2, stock_max = None\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az377-287"},{"name":"thread","value":"2391-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"None"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":73,"skipped":0,"passed":0,"unknown":0,"total":73},"items":[{"uid":"1b78635a4e817d48","reportUrl":"https://golosin.github.io/API-tests/117//#testresult/1b78635a4e817d48","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668749682507,"stop":1668749683410,"duration":903}},{"uid":"3bed4c29fead8f53","reportUrl":"https://golosin.github.io/API-tests/116//#testresult/3bed4c29fead8f53","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668663310862,"stop":1668663311804,"duration":942}},{"uid":"5cb39773596553c9","reportUrl":"https://golosin.github.io/API-tests/115//#testresult/5cb39773596553c9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668576863591,"stop":1668576864478,"duration":887}},{"uid":"81357504ae6b10ce","reportUrl":"https://golosin.github.io/API-tests/114//#testresult/81357504ae6b10ce","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668490448170,"stop":1668490449113,"duration":943}},{"uid":"6d99d6a2e83ea10e","reportUrl":"https://golosin.github.io/API-tests/113//#testresult/6d99d6a2e83ea10e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668404577736,"stop":1668404578458,"duration":722}},{"uid":"214dfcab852b69da","reportUrl":"https://golosin.github.io/API-tests/112//#testresult/214dfcab852b69da","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668317838116,"stop":1668317839225,"duration":1109}},{"uid":"ff8aa4efed816ba6","reportUrl":"https://golosin.github.io/API-tests/111//#testresult/ff8aa4efed816ba6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668231390346,"stop":1668231391108,"duration":762}},{"uid":"88f8e46c801178b1","reportUrl":"https://golosin.github.io/API-tests/110//#testresult/88f8e46c801178b1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668145229383,"stop":1668145230093,"duration":710}},{"uid":"8075fcee88dfc5a9","reportUrl":"https://golosin.github.io/API-tests/109//#testresult/8075fcee88dfc5a9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668058929453,"stop":1668058930353,"duration":900}},{"uid":"4aa2c9f6f0b2515b","reportUrl":"https://golosin.github.io/API-tests/108//#testresult/4aa2c9f6f0b2515b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667972711024,"stop":1667972711735,"duration":711}},{"uid":"1ebfd3e600c59b35","reportUrl":"https://golosin.github.io/API-tests/107//#testresult/1ebfd3e600c59b35","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667886131937,"stop":1667886133041,"duration":1104}},{"uid":"65e358da3a3700d9","reportUrl":"https://golosin.github.io/API-tests/106//#testresult/65e358da3a3700d9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667799839125,"stop":1667799839993,"duration":868}},{"uid":"72bc9c09b816355d","reportUrl":"https://golosin.github.io/API-tests/105//#testresult/72bc9c09b816355d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667712867381,"stop":1667712868071,"duration":690}},{"uid":"fe53a23f8841d9e6","reportUrl":"https://golosin.github.io/API-tests/104//#testresult/fe53a23f8841d9e6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667626470124,"stop":1667626470835,"duration":711}},{"uid":"ef2a9c98696e8a4f","reportUrl":"https://golosin.github.io/API-tests/103//#testresult/ef2a9c98696e8a4f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667540444210,"stop":1667540445078,"duration":868}},{"uid":"3ceff445906d9d","reportUrl":"https://golosin.github.io/API-tests/102//#testresult/3ceff445906d9d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667454003189,"stop":1667454004114,"duration":925}},{"uid":"613ef4a2667ea38b","reportUrl":"https://golosin.github.io/API-tests/101//#testresult/613ef4a2667ea38b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667368610427,"stop":1667368611130,"duration":703}},{"uid":"b8ed4f78343145d5","reportUrl":"https://golosin.github.io/API-tests/100//#testresult/b8ed4f78343145d5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667282428442,"stop":1667282429154,"duration":712}},{"uid":"7b0d86746b44af7a","reportUrl":"https://golosin.github.io/API-tests/99//#testresult/7b0d86746b44af7a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667195425190,"stop":1667195426090,"duration":900}},{"uid":"4f59523ca068da6b","reportUrl":"https://golosin.github.io/API-tests/98//#testresult/4f59523ca068da6b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667108547078,"stop":1667108547955,"duration":877}}]},"tags":[]},"source":"4671d87af9e92cee.json","parameterValues":["'WILDBERRIES'","None","2"]}