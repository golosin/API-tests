{"uid":"11028027f0e7cb03","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"f9ead6112a5139ded03988774bdd2dd2","time":{"start":1666075138845,"stop":1666075139530,"duration":685},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', stock_min = 2, stock_max = 2\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"story","value":"Фильтр по \"Stock"},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az198-290"},{"name":"thread","value":"2458-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"},{"name":"stock_max","value":"2"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":41,"skipped":0,"passed":0,"unknown":0,"total":41},"items":[{"uid":"adf07d684bf4602d","reportUrl":"https://golosin.github.io/API-tests/85//#testresult/adf07d684bf4602d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665988639594,"stop":1665988640702,"duration":1108}},{"uid":"998b4820e1c6f0e5","reportUrl":"https://golosin.github.io/API-tests/84//#testresult/998b4820e1c6f0e5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665899915775,"stop":1665899916776,"duration":1001}},{"uid":"37c9742df83911fe","reportUrl":"https://golosin.github.io/API-tests/83//#testresult/37c9742df83911fe","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665813722496,"stop":1665813723362,"duration":866}},{"uid":"4f329a029b3882bc","reportUrl":"https://golosin.github.io/API-tests/82//#testresult/4f329a029b3882bc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665729117379,"stop":1665729118128,"duration":749}},{"uid":"279ca6a5b46832f","reportUrl":"https://golosin.github.io/API-tests/81//#testresult/279ca6a5b46832f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665641728764,"stop":1665641729438,"duration":674}},{"uid":"b07c40fd6155155a","reportUrl":"https://golosin.github.io/API-tests/80//#testresult/b07c40fd6155155a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665554487915,"stop":1665554489020,"duration":1105}},{"uid":"2572bd25a8f76e9c","reportUrl":"https://golosin.github.io/API-tests/79//#testresult/2572bd25a8f76e9c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665469406064,"stop":1665469406740,"duration":676}},{"uid":"41e762a5ef592941","reportUrl":"https://golosin.github.io/API-tests/78//#testresult/41e762a5ef592941","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665383153303,"stop":1665383154009,"duration":706}},{"uid":"55f88e480673b86c","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/55f88e480673b86c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294913729,"stop":1665294914588,"duration":859}},{"uid":"f9621746c94320a9","reportUrl":"https://golosin.github.io/API-tests/76//#testresult/f9621746c94320a9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665208202761,"stop":1665208203610,"duration":849}},{"uid":"3be395264ebb50dd","reportUrl":"https://golosin.github.io/API-tests/75//#testresult/3be395264ebb50dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665122030270,"stop":1665122030953,"duration":683}},{"uid":"2a6ef62b3a6fc91","reportUrl":"https://golosin.github.io/API-tests/74//#testresult/2a6ef62b3a6fc91","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665035891367,"stop":1665035892073,"duration":706}},{"uid":"6e8a0dd471a479b6","reportUrl":"https://golosin.github.io/API-tests/73//#testresult/6e8a0dd471a479b6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664949864629,"stop":1664949865305,"duration":676}},{"uid":"7598d80e754ad3b8","reportUrl":"https://golosin.github.io/API-tests/72//#testresult/7598d80e754ad3b8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664863279911,"stop":1664863280612,"duration":701}},{"uid":"6e2f850ca78a498f","reportUrl":"https://golosin.github.io/API-tests/71//#testresult/6e2f850ca78a498f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664776746771,"stop":1664776747670,"duration":899}},{"uid":"41fe69998c0a2e9a","reportUrl":"https://golosin.github.io/API-tests/70//#testresult/41fe69998c0a2e9a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664690371367,"stop":1664690372471,"duration":1104}},{"uid":"98da7a6ee28300f9","reportUrl":"https://golosin.github.io/API-tests/68//#testresult/98da7a6ee28300f9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664519839836,"stop":1664519840934,"duration":1098}},{"uid":"4881e0500ae76b9e","reportUrl":"https://golosin.github.io/API-tests/67//#testresult/4881e0500ae76b9e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664433520725,"stop":1664433521829,"duration":1104}},{"uid":"f5086722dda15aaf","reportUrl":"https://golosin.github.io/API-tests/66//#testresult/f5086722dda15aaf","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664346835803,"stop":1664346836695,"duration":892}},{"uid":"85fff07f612abda0","reportUrl":"https://golosin.github.io/API-tests/65//#testresult/85fff07f612abda0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664260012645,"stop":1664260013508,"duration":863}}]},"tags":[]},"source":"11028027f0e7cb03.json","parameterValues":["'FEED'","2","2"]}