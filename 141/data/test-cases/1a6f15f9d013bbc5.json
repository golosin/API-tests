{"uid":"1a6f15f9d013bbc5","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"89764c0620f8a4cd02275f46d5feb195","time":{"start":1670823099808,"stop":1670823100625,"duration":817},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\n        elif representation == 'WILDBERRIES':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][17]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"epic","value":"Тест стенд v.1.1.2"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az403-410"},{"name":"thread","value":"2531-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":96,"skipped":0,"passed":0,"unknown":0,"total":96},"items":[{"uid":"a9ff71a36ca719de","reportUrl":"https://golosin.github.io/API-tests/140//#testresult/a9ff71a36ca719de","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670736703847,"stop":1670736704658,"duration":811}},{"uid":"a31f26b417033d56","reportUrl":"https://golosin.github.io/API-tests/139//#testresult/a31f26b417033d56","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670650332965,"stop":1670650334189,"duration":1224}},{"uid":"bb4b4560481abd29","reportUrl":"https://golosin.github.io/API-tests/138//#testresult/bb4b4560481abd29","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670563910829,"stop":1670563911830,"duration":1001}},{"uid":"f9ae15b96d2220ce","reportUrl":"https://golosin.github.io/API-tests/137//#testresult/f9ae15b96d2220ce","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670477502829,"stop":1670477503669,"duration":840}},{"uid":"bf7c7b7dc4669ec7","reportUrl":"https://golosin.github.io/API-tests/136//#testresult/bf7c7b7dc4669ec7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670391105294,"stop":1670391106136,"duration":842}},{"uid":"8314ca77c7369dab","reportUrl":"https://golosin.github.io/API-tests/135//#testresult/8314ca77c7369dab","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670304742540,"stop":1670304743392,"duration":852}},{"uid":"80f9fa49bf2e6e68","reportUrl":"https://golosin.github.io/API-tests/134//#testresult/80f9fa49bf2e6e68","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670218327794,"stop":1670218328703,"duration":909}},{"uid":"7ab59aa26d365aa4","reportUrl":"https://golosin.github.io/API-tests/133//#testresult/7ab59aa26d365aa4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670131913382,"stop":1670131914405,"duration":1023}},{"uid":"66be6139f87bbef5","reportUrl":"https://golosin.github.io/API-tests/132//#testresult/66be6139f87bbef5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670045509562,"stop":1670045510409,"duration":847}},{"uid":"9bc767293a8854f5","reportUrl":"https://golosin.github.io/API-tests/131//#testresult/9bc767293a8854f5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669959133956,"stop":1669959135020,"duration":1064}},{"uid":"6862b103aed020ea","reportUrl":"https://golosin.github.io/API-tests/130//#testresult/6862b103aed020ea","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669872858511,"stop":1669872859649,"duration":1138}},{"uid":"e95e188897205109","reportUrl":"https://golosin.github.io/API-tests/129//#testresult/e95e188897205109","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669786414380,"stop":1669786415541,"duration":1161}},{"uid":"48d709e3b424155b","reportUrl":"https://golosin.github.io/API-tests/128//#testresult/48d709e3b424155b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669699982877,"stop":1669699984095,"duration":1218}},{"uid":"5fb4af3eade1ecdd","reportUrl":"https://golosin.github.io/API-tests/127//#testresult/5fb4af3eade1ecdd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669613568762,"stop":1669613569459,"duration":697}},{"uid":"d8c6e8105dbbf533","reportUrl":"https://golosin.github.io/API-tests/126//#testresult/d8c6e8105dbbf533","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669527116807,"stop":1669527117493,"duration":686}},{"uid":"d2a659f315a0c90c","reportUrl":"https://golosin.github.io/API-tests/125//#testresult/d2a659f315a0c90c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669440710208,"stop":1669440710900,"duration":692}},{"uid":"e0d2b4cb049143b6","reportUrl":"https://golosin.github.io/API-tests/124//#testresult/e0d2b4cb049143b6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669354354308,"stop":1669354355000,"duration":692}},{"uid":"a1308a04f607237f","reportUrl":"https://golosin.github.io/API-tests/123//#testresult/a1308a04f607237f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669267956001,"stop":1669267956887,"duration":886}},{"uid":"f7c61c3a19ba14dd","reportUrl":"https://golosin.github.io/API-tests/122//#testresult/f7c61c3a19ba14dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669181600382,"stop":1669181601472,"duration":1090}},{"uid":"22cf73fa0c4c352f","reportUrl":"https://golosin.github.io/API-tests/121//#testresult/22cf73fa0c4c352f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669095322059,"stop":1669095322758,"duration":699}}]},"tags":[]},"source":"1a6f15f9d013bbc5.json","parameterValues":["'WILDBERRIES'"]}