{"uid":"82ae603e6f7ce","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"b1ad4e9b518d5e42ac697e9a109c8071","time":{"start":1665641732225,"stop":1665641732913,"duration":688},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = 2, stock_max = None\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az154-518"},{"name":"thread","value":"2453-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"None"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":36,"skipped":0,"passed":0,"unknown":0,"total":36},"items":[{"uid":"76d8f5348831515","reportUrl":"https://golosin.github.io/API-tests/80//#testresult/76d8f5348831515","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665554493515,"stop":1665554494613,"duration":1098}},{"uid":"1bf808ab98d32a09","reportUrl":"https://golosin.github.io/API-tests/79//#testresult/1bf808ab98d32a09","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665469409538,"stop":1665469410219,"duration":681}},{"uid":"d1efb73e845bd487","reportUrl":"https://golosin.github.io/API-tests/78//#testresult/d1efb73e845bd487","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665383156892,"stop":1665383157609,"duration":717}},{"uid":"133407fb9b4ee196","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/133407fb9b4ee196","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294918060,"stop":1665294918935,"duration":875}},{"uid":"980c4e36e8fe10ee","reportUrl":"https://golosin.github.io/API-tests/76//#testresult/980c4e36e8fe10ee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665208207165,"stop":1665208208029,"duration":864}},{"uid":"235bbc49ea9a4e5f","reportUrl":"https://golosin.github.io/API-tests/75//#testresult/235bbc49ea9a4e5f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665122033720,"stop":1665122034399,"duration":679}},{"uid":"cf582543c5bab6ee","reportUrl":"https://golosin.github.io/API-tests/74//#testresult/cf582543c5bab6ee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665035894934,"stop":1665035895629,"duration":695}},{"uid":"584b470b9acdfd64","reportUrl":"https://golosin.github.io/API-tests/73//#testresult/584b470b9acdfd64","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664949868078,"stop":1664949868764,"duration":686}},{"uid":"f633ce42fb696e4a","reportUrl":"https://golosin.github.io/API-tests/72//#testresult/f633ce42fb696e4a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664863283362,"stop":1664863284067,"duration":705}},{"uid":"18f0ca224ea0564d","reportUrl":"https://golosin.github.io/API-tests/71//#testresult/18f0ca224ea0564d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664776751240,"stop":1664776752106,"duration":866}},{"uid":"8563d7bb3c241d16","reportUrl":"https://golosin.github.io/API-tests/70//#testresult/8563d7bb3c241d16","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664690376913,"stop":1664690378012,"duration":1099}},{"uid":"ad93827e8606d4dc","reportUrl":"https://golosin.github.io/API-tests/68//#testresult/ad93827e8606d4dc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664519845371,"stop":1664519846473,"duration":1102}},{"uid":"3c819b601b8713c","reportUrl":"https://golosin.github.io/API-tests/67//#testresult/3c819b601b8713c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664433526280,"stop":1664433527402,"duration":1122}},{"uid":"8d70f9df89617cfb","reportUrl":"https://golosin.github.io/API-tests/66//#testresult/8d70f9df89617cfb","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664346840235,"stop":1664346841173,"duration":938}},{"uid":"6f43f1e74ab32124","reportUrl":"https://golosin.github.io/API-tests/65//#testresult/6f43f1e74ab32124","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664260017027,"stop":1664260017883,"duration":856}},{"uid":"ef576dc99074a903","reportUrl":"https://golosin.github.io/API-tests/64//#testresult/ef576dc99074a903","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664173987578,"stop":1664173988276,"duration":698}},{"uid":"800913ffaf4d9a6a","reportUrl":"https://golosin.github.io/API-tests/63//#testresult/800913ffaf4d9a6a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664085260141,"stop":1664085261020,"duration":879}},{"uid":"d98d90a1ec9a1383","reportUrl":"https://golosin.github.io/API-tests/62//#testresult/d98d90a1ec9a1383","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663999141987,"stop":1663999143090,"duration":1103}},{"uid":"dc70c26828962209","reportUrl":"https://golosin.github.io/API-tests/61//#testresult/dc70c26828962209","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663914339108,"stop":1663914339792,"duration":684}},{"uid":"5b4dc41c8ae11204","reportUrl":"https://golosin.github.io/API-tests/60//#testresult/5b4dc41c8ae11204","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1663828203678,"stop":1663828204559,"duration":881}}]},"tags":[]},"source":"82ae603e6f7ce.json","parameterValues":["'WILDBERRIES'","None","2"]}