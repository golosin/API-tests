{"uid":"c5626439fffbed88","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"89764c0620f8a4cd02275f46d5feb195","time":{"start":1666245453491,"stop":1666245454194,"duration":703},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\n        elif representation == 'WILDBERRIES':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][17]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az628-388"},{"name":"thread","value":"2454-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":43,"skipped":0,"passed":0,"unknown":0,"total":43},"items":[{"uid":"278331e73600086f","reportUrl":"https://golosin.github.io/API-tests/87//#testresult/278331e73600086f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666161763504,"stop":1666161764206,"duration":702}},{"uid":"f207e18748ef2891","reportUrl":"https://golosin.github.io/API-tests/86//#testresult/f207e18748ef2891","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666075156128,"stop":1666075156804,"duration":676}},{"uid":"1af0ea4bdc3b6363","reportUrl":"https://golosin.github.io/API-tests/85//#testresult/1af0ea4bdc3b6363","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665988667358,"stop":1665988668455,"duration":1097}},{"uid":"98f1823b40f26532","reportUrl":"https://golosin.github.io/API-tests/84//#testresult/98f1823b40f26532","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665899934472,"stop":1665899935257,"duration":785}},{"uid":"2cd768f733b40a32","reportUrl":"https://golosin.github.io/API-tests/83//#testresult/2cd768f733b40a32","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665813744617,"stop":1665813745504,"duration":887}},{"uid":"efb9d8a1c70a87c1","reportUrl":"https://golosin.github.io/API-tests/82//#testresult/efb9d8a1c70a87c1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665729136115,"stop":1665729136801,"duration":686}},{"uid":"74bb6b4776e4101a","reportUrl":"https://golosin.github.io/API-tests/81//#testresult/74bb6b4776e4101a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665641746110,"stop":1665641746792,"duration":682}},{"uid":"9153a121772986e5","reportUrl":"https://golosin.github.io/API-tests/80//#testresult/9153a121772986e5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665554515815,"stop":1665554516913,"duration":1098}},{"uid":"e0853379f9912519","reportUrl":"https://golosin.github.io/API-tests/79//#testresult/e0853379f9912519","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665469423570,"stop":1665469424258,"duration":688}},{"uid":"a8270191e02e301d","reportUrl":"https://golosin.github.io/API-tests/78//#testresult/a8270191e02e301d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665383171374,"stop":1665383172102,"duration":728}},{"uid":"c83e26a6c97a4f0","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/c83e26a6c97a4f0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294935593,"stop":1665294936439,"duration":846}},{"uid":"bb72c847dc45805d","reportUrl":"https://golosin.github.io/API-tests/76//#testresult/bb72c847dc45805d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665208224781,"stop":1665208225660,"duration":879}},{"uid":"1c30e372fd64c917","reportUrl":"https://golosin.github.io/API-tests/75//#testresult/1c30e372fd64c917","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665122047653,"stop":1665122048334,"duration":681}},{"uid":"98dd4d22d63b57c0","reportUrl":"https://golosin.github.io/API-tests/74//#testresult/98dd4d22d63b57c0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665035909196,"stop":1665035909898,"duration":702}},{"uid":"a207b9e5c582ceda","reportUrl":"https://golosin.github.io/API-tests/73//#testresult/a207b9e5c582ceda","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664949882040,"stop":1664949882715,"duration":675}},{"uid":"9ff842e36aa5aa20","reportUrl":"https://golosin.github.io/API-tests/72//#testresult/9ff842e36aa5aa20","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664863297267,"stop":1664863297964,"duration":697}},{"uid":"ed9fb0b7b5e0c0fc","reportUrl":"https://golosin.github.io/API-tests/71//#testresult/ed9fb0b7b5e0c0fc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664776769043,"stop":1664776769937,"duration":894}},{"uid":"b23bb5241797b19c","reportUrl":"https://golosin.github.io/API-tests/70//#testresult/b23bb5241797b19c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664690399235,"stop":1664690400340,"duration":1105}},{"uid":"1a7e955da5bafaeb","reportUrl":"https://golosin.github.io/API-tests/68//#testresult/1a7e955da5bafaeb","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664519867589,"stop":1664519868685,"duration":1096}},{"uid":"589d814a2dd0dd6f","reportUrl":"https://golosin.github.io/API-tests/67//#testresult/589d814a2dd0dd6f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664433548553,"stop":1664433549663,"duration":1110}}]},"tags":[]},"source":"c5626439fffbed88.json","parameterValues":["'WILDBERRIES'"]}