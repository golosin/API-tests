{"uid":"a6ecf6fe0a002954","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"f9ead6112a5139ded03988774bdd2dd2","time":{"start":1668490443686,"stop":1668490444576,"duration":890},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED', stock_min = 2, stock_max = 2\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az99-481"},{"name":"thread","value":"2420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"},{"name":"stock_max","value":"2"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":69,"skipped":0,"passed":0,"unknown":0,"total":69},"items":[{"uid":"ca8bd1d5456f75b7","reportUrl":"https://golosin.github.io/API-tests/113//#testresult/ca8bd1d5456f75b7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668404574164,"stop":1668404574900,"duration":736}},{"uid":"16515a22a2f5dbef","reportUrl":"https://golosin.github.io/API-tests/112//#testresult/16515a22a2f5dbef","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668317832417,"stop":1668317833519,"duration":1102}},{"uid":"62e109ac3433d748","reportUrl":"https://golosin.github.io/API-tests/111//#testresult/62e109ac3433d748","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668231386784,"stop":1668231387480,"duration":696}},{"uid":"968aabc86dcd5cdd","reportUrl":"https://golosin.github.io/API-tests/110//#testresult/968aabc86dcd5cdd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668145225762,"stop":1668145226499,"duration":737}},{"uid":"168c7addc2ce0dad","reportUrl":"https://golosin.github.io/API-tests/109//#testresult/168c7addc2ce0dad","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668058924980,"stop":1668058925873,"duration":893}},{"uid":"cfa98294ee289be5","reportUrl":"https://golosin.github.io/API-tests/108//#testresult/cfa98294ee289be5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667972707182,"stop":1667972707949,"duration":767}},{"uid":"f7aae9ca339e20d3","reportUrl":"https://golosin.github.io/API-tests/107//#testresult/f7aae9ca339e20d3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667886126418,"stop":1667886127522,"duration":1104}},{"uid":"862486354576d0fc","reportUrl":"https://golosin.github.io/API-tests/106//#testresult/862486354576d0fc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667799834730,"stop":1667799835600,"duration":870}},{"uid":"27ee078e3fe914a3","reportUrl":"https://golosin.github.io/API-tests/105//#testresult/27ee078e3fe914a3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667712863830,"stop":1667712864526,"duration":696}},{"uid":"bae6bb6bb422e13a","reportUrl":"https://golosin.github.io/API-tests/104//#testresult/bae6bb6bb422e13a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667626466446,"stop":1667626467167,"duration":721}},{"uid":"274e68d7a010361c","reportUrl":"https://golosin.github.io/API-tests/103//#testresult/274e68d7a010361c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667540439685,"stop":1667540440588,"duration":903}},{"uid":"b5521ca4adb9a4c8","reportUrl":"https://golosin.github.io/API-tests/102//#testresult/b5521ca4adb9a4c8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667453998719,"stop":1667453999591,"duration":872}},{"uid":"2fc72aa48bb6edaa","reportUrl":"https://golosin.github.io/API-tests/101//#testresult/2fc72aa48bb6edaa","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667368606747,"stop":1667368607506,"duration":759}},{"uid":"f24cadf05f1ab388","reportUrl":"https://golosin.github.io/API-tests/100//#testresult/f24cadf05f1ab388","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667282424769,"stop":1667282425494,"duration":725}},{"uid":"e6e80ee06b9bfb5f","reportUrl":"https://golosin.github.io/API-tests/99//#testresult/e6e80ee06b9bfb5f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667195420479,"stop":1667195421385,"duration":906}},{"uid":"34aab949b33218f6","reportUrl":"https://golosin.github.io/API-tests/98//#testresult/34aab949b33218f6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667108542512,"stop":1667108543462,"duration":950}},{"uid":"c20283514937a411","reportUrl":"https://golosin.github.io/API-tests/97//#testresult/c20283514937a411","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667022050353,"stop":1667022051249,"duration":896}},{"uid":"b904b805e4da367d","reportUrl":"https://golosin.github.io/API-tests/96//#testresult/b904b805e4da367d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666935977099,"stop":1666935977978,"duration":879}},{"uid":"f6f381deb2abd0e1","reportUrl":"https://golosin.github.io/API-tests/95//#testresult/f6f381deb2abd0e1","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666849477305,"stop":1666849478002,"duration":697}},{"uid":"a448707b81232456","reportUrl":"https://golosin.github.io/API-tests/94//#testresult/a448707b81232456","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666763255819,"stop":1666763256516,"duration":697}}]},"tags":[]},"source":"a6ecf6fe0a002954.json","parameterValues":["'FEED'","2","2"]}