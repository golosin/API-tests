{"uid":"c158d86be93ff51b","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"89764c0620f8a4cd02275f46d5feb195","time":{"start":1671600707302,"stop":1671600708146,"duration":844},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\n        elif representation == 'WILDBERRIES':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][17]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.2.3"},{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az189-385"},{"name":"thread","value":"2451-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":105,"skipped":0,"passed":0,"unknown":0,"total":105},"items":[{"uid":"3d7a547df9524e1f","reportUrl":"https://golosin.github.io/API-tests/149//#testresult/3d7a547df9524e1f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671514318375,"stop":1671514319212,"duration":837}},{"uid":"a24c97c33218c826","reportUrl":"https://golosin.github.io/API-tests/148//#testresult/a24c97c33218c826","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671427944987,"stop":1671427946236,"duration":1249}},{"uid":"622879397f838bdb","reportUrl":"https://golosin.github.io/API-tests/147//#testresult/622879397f838bdb","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671341537620,"stop":1671341538882,"duration":1262}},{"uid":"15eec5426e3658e8","reportUrl":"https://golosin.github.io/API-tests/146//#testresult/15eec5426e3658e8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671255124078,"stop":1671255125110,"duration":1032}},{"uid":"37be265e833c6ac7","reportUrl":"https://golosin.github.io/API-tests/145//#testresult/37be265e833c6ac7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671168709910,"stop":1671168710773,"duration":863}},{"uid":"e07bf1bcaa32f10a","reportUrl":"https://golosin.github.io/API-tests/144//#testresult/e07bf1bcaa32f10a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671082336444,"stop":1671082337475,"duration":1031}},{"uid":"f520712d446a8a79","reportUrl":"https://golosin.github.io/API-tests/143//#testresult/f520712d446a8a79","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670995920160,"stop":1670995921152,"duration":992}},{"uid":"d4c4fd4efd947428","reportUrl":"https://golosin.github.io/API-tests/142//#testresult/d4c4fd4efd947428","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670909511432,"stop":1670909512378,"duration":946}},{"uid":"1a6f15f9d013bbc5","reportUrl":"https://golosin.github.io/API-tests/141//#testresult/1a6f15f9d013bbc5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670823099808,"stop":1670823100625,"duration":817}},{"uid":"a9ff71a36ca719de","reportUrl":"https://golosin.github.io/API-tests/140//#testresult/a9ff71a36ca719de","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670736703847,"stop":1670736704658,"duration":811}},{"uid":"a31f26b417033d56","reportUrl":"https://golosin.github.io/API-tests/139//#testresult/a31f26b417033d56","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670650332965,"stop":1670650334189,"duration":1224}},{"uid":"bb4b4560481abd29","reportUrl":"https://golosin.github.io/API-tests/138//#testresult/bb4b4560481abd29","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670563910829,"stop":1670563911830,"duration":1001}},{"uid":"f9ae15b96d2220ce","reportUrl":"https://golosin.github.io/API-tests/137//#testresult/f9ae15b96d2220ce","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670477502829,"stop":1670477503669,"duration":840}},{"uid":"bf7c7b7dc4669ec7","reportUrl":"https://golosin.github.io/API-tests/136//#testresult/bf7c7b7dc4669ec7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670391105294,"stop":1670391106136,"duration":842}},{"uid":"8314ca77c7369dab","reportUrl":"https://golosin.github.io/API-tests/135//#testresult/8314ca77c7369dab","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670304742540,"stop":1670304743392,"duration":852}},{"uid":"80f9fa49bf2e6e68","reportUrl":"https://golosin.github.io/API-tests/134//#testresult/80f9fa49bf2e6e68","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670218327794,"stop":1670218328703,"duration":909}},{"uid":"7ab59aa26d365aa4","reportUrl":"https://golosin.github.io/API-tests/133//#testresult/7ab59aa26d365aa4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670131913382,"stop":1670131914405,"duration":1023}},{"uid":"66be6139f87bbef5","reportUrl":"https://golosin.github.io/API-tests/132//#testresult/66be6139f87bbef5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670045509562,"stop":1670045510409,"duration":847}},{"uid":"9bc767293a8854f5","reportUrl":"https://golosin.github.io/API-tests/131//#testresult/9bc767293a8854f5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669959133956,"stop":1669959135020,"duration":1064}},{"uid":"6862b103aed020ea","reportUrl":"https://golosin.github.io/API-tests/130//#testresult/6862b103aed020ea","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669872858511,"stop":1669872859649,"duration":1138}}]},"tags":[]},"source":"c158d86be93ff51b.json","parameterValues":["'WILDBERRIES'"]}