{"uid":"7b0d86746b44af7a","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"b1ad4e9b518d5e42ac697e9a109c8071","time":{"start":1667195425190,"stop":1667195426090,"duration":900},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = 2, stock_max = None\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az238-36"},{"name":"thread","value":"2453-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"None"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":54,"skipped":0,"passed":0,"unknown":0,"total":54},"items":[{"uid":"4f59523ca068da6b","reportUrl":"https://golosin.github.io/API-tests/98//#testresult/4f59523ca068da6b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667108547078,"stop":1667108547955,"duration":877}},{"uid":"2aad52551940754d","reportUrl":"https://golosin.github.io/API-tests/97//#testresult/2aad52551940754d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667022054874,"stop":1667022055784,"duration":910}},{"uid":"a626bd9ba7dd2042","reportUrl":"https://golosin.github.io/API-tests/96//#testresult/a626bd9ba7dd2042","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666935981640,"stop":1666935982617,"duration":977}},{"uid":"f5fde1c9515df35","reportUrl":"https://golosin.github.io/API-tests/95//#testresult/f5fde1c9515df35","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666849480955,"stop":1666849481671,"duration":716}},{"uid":"f7e2fc057262ae8f","reportUrl":"https://golosin.github.io/API-tests/94//#testresult/f7e2fc057262ae8f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666763259320,"stop":1666763260021,"duration":701}},{"uid":"c2fbd06f98e50fd7","reportUrl":"https://golosin.github.io/API-tests/93//#testresult/c2fbd06f98e50fd7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666679837474,"stop":1666679838170,"duration":696}},{"uid":"4a9607d08e95453c","reportUrl":"https://golosin.github.io/API-tests/92//#testresult/4a9607d08e95453c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666593695056,"stop":1666593695744,"duration":688}},{"uid":"4cc9959ca7336021","reportUrl":"https://golosin.github.io/API-tests/91//#testresult/4cc9959ca7336021","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666504781230,"stop":1666504781946,"duration":716}},{"uid":"1f09fd175707d75e","reportUrl":"https://golosin.github.io/API-tests/90//#testresult/1f09fd175707d75e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666418267399,"stop":1666418268281,"duration":882}},{"uid":"744ce1fbd293529c","reportUrl":"https://golosin.github.io/API-tests/89//#testresult/744ce1fbd293529c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666332220524,"stop":1666332221246,"duration":722}},{"uid":"f935ec179b0cf2c4","reportUrl":"https://golosin.github.io/API-tests/88//#testresult/f935ec179b0cf2c4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666245438908,"stop":1666245439601,"duration":693}},{"uid":"48ac06f1db449b3c","reportUrl":"https://golosin.github.io/API-tests/87//#testresult/48ac06f1db449b3c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666161749605,"stop":1666161750295,"duration":690}},{"uid":"3d91d7ae8f0788ce","reportUrl":"https://golosin.github.io/API-tests/86//#testresult/3d91d7ae8f0788ce","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666075142309,"stop":1666075142994,"duration":685}},{"uid":"3413962392e29eb4","reportUrl":"https://golosin.github.io/API-tests/85//#testresult/3413962392e29eb4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665988645155,"stop":1665988646241,"duration":1086}},{"uid":"51fb15bd0fbae897","reportUrl":"https://golosin.github.io/API-tests/84//#testresult/51fb15bd0fbae897","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665899919807,"stop":1665899920511,"duration":704}},{"uid":"db49afdef21b0d7d","reportUrl":"https://golosin.github.io/API-tests/83//#testresult/db49afdef21b0d7d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665813726930,"stop":1665813727821,"duration":891}},{"uid":"f0a3251acfe618d9","reportUrl":"https://golosin.github.io/API-tests/82//#testresult/f0a3251acfe618d9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665729120938,"stop":1665729121658,"duration":720}},{"uid":"82ae603e6f7ce","reportUrl":"https://golosin.github.io/API-tests/81//#testresult/82ae603e6f7ce","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665641732225,"stop":1665641732913,"duration":688}},{"uid":"76d8f5348831515","reportUrl":"https://golosin.github.io/API-tests/80//#testresult/76d8f5348831515","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665554493515,"stop":1665554494613,"duration":1098}},{"uid":"1bf808ab98d32a09","reportUrl":"https://golosin.github.io/API-tests/79//#testresult/1bf808ab98d32a09","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665469409538,"stop":1665469410219,"duration":681}}]},"tags":[]},"source":"7b0d86746b44af7a.json","parameterValues":["'WILDBERRIES'","None","2"]}