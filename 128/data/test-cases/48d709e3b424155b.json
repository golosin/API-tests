{"uid":"48d709e3b424155b","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"89764c0620f8a4cd02275f46d5feb195","time":{"start":1669699982877,"stop":1669699984095,"duration":1218},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\n        elif representation == 'WILDBERRIES':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][17]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az318-892"},{"name":"thread","value":"2353-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":83,"skipped":0,"passed":0,"unknown":0,"total":83},"items":[{"uid":"5fb4af3eade1ecdd","reportUrl":"https://golosin.github.io/API-tests/127//#testresult/5fb4af3eade1ecdd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669613568762,"stop":1669613569459,"duration":697}},{"uid":"d8c6e8105dbbf533","reportUrl":"https://golosin.github.io/API-tests/126//#testresult/d8c6e8105dbbf533","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669527116807,"stop":1669527117493,"duration":686}},{"uid":"d2a659f315a0c90c","reportUrl":"https://golosin.github.io/API-tests/125//#testresult/d2a659f315a0c90c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669440710208,"stop":1669440710900,"duration":692}},{"uid":"e0d2b4cb049143b6","reportUrl":"https://golosin.github.io/API-tests/124//#testresult/e0d2b4cb049143b6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669354354308,"stop":1669354355000,"duration":692}},{"uid":"a1308a04f607237f","reportUrl":"https://golosin.github.io/API-tests/123//#testresult/a1308a04f607237f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669267956001,"stop":1669267956887,"duration":886}},{"uid":"f7c61c3a19ba14dd","reportUrl":"https://golosin.github.io/API-tests/122//#testresult/f7c61c3a19ba14dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669181600382,"stop":1669181601472,"duration":1090}},{"uid":"22cf73fa0c4c352f","reportUrl":"https://golosin.github.io/API-tests/121//#testresult/22cf73fa0c4c352f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669095322059,"stop":1669095322758,"duration":699}},{"uid":"f8bccff2034b73c7","reportUrl":"https://golosin.github.io/API-tests/120//#testresult/f8bccff2034b73c7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669008926690,"stop":1669008927580,"duration":890}},{"uid":"ddf0afc5617ad5ea","reportUrl":"https://golosin.github.io/API-tests/119//#testresult/ddf0afc5617ad5ea","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668922485588,"stop":1668922486701,"duration":1113}},{"uid":"1303efbd4a861435","reportUrl":"https://golosin.github.io/API-tests/118//#testresult/1303efbd4a861435","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668836060403,"stop":1668836061783,"duration":1380}},{"uid":"2b309c347aaf9dee","reportUrl":"https://golosin.github.io/API-tests/117//#testresult/2b309c347aaf9dee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668749700892,"stop":1668749701834,"duration":942}},{"uid":"3f4ecc0eddb74784","reportUrl":"https://golosin.github.io/API-tests/116//#testresult/3f4ecc0eddb74784","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668663331592,"stop":1668663332481,"duration":889}},{"uid":"ea80311184d85239","reportUrl":"https://golosin.github.io/API-tests/115//#testresult/ea80311184d85239","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668576882091,"stop":1668576882964,"duration":873}},{"uid":"4bbab22e87f6bbc6","reportUrl":"https://golosin.github.io/API-tests/114//#testresult/4bbab22e87f6bbc6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668490466513,"stop":1668490467443,"duration":930}},{"uid":"601d63102d87cd0e","reportUrl":"https://golosin.github.io/API-tests/113//#testresult/601d63102d87cd0e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668404592252,"stop":1668404592936,"duration":684}},{"uid":"20055a9724e4e4dd","reportUrl":"https://golosin.github.io/API-tests/112//#testresult/20055a9724e4e4dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668317860784,"stop":1668317861908,"duration":1124}},{"uid":"e57624b3d6099255","reportUrl":"https://golosin.github.io/API-tests/111//#testresult/e57624b3d6099255","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668231404410,"stop":1668231405099,"duration":689}},{"uid":"b0465813449166f5","reportUrl":"https://golosin.github.io/API-tests/110//#testresult/b0465813449166f5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668145244196,"stop":1668145244883,"duration":687}},{"uid":"de5b338c39d61da9","reportUrl":"https://golosin.github.io/API-tests/109//#testresult/de5b338c39d61da9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668058947446,"stop":1668058948312,"duration":866}},{"uid":"1204bcab5ead7d1e","reportUrl":"https://golosin.github.io/API-tests/108//#testresult/1204bcab5ead7d1e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667972726107,"stop":1667972726830,"duration":723}}]},"tags":[]},"source":"48d709e3b424155b.json","parameterValues":["'WILDBERRIES'"]}