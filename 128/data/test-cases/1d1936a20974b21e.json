{"uid":"1d1936a20974b21e","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"dcfc6f447ab1152a67e381672353f11e","time":{"start":1669699977262,"stop":1669699978380,"duration":1118},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'FEED'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:29: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az318-892"},{"name":"thread","value":"2353-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'FEED'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":83,"skipped":0,"passed":0,"unknown":0,"total":83},"items":[{"uid":"a801f3d79c9822a9","reportUrl":"https://golosin.github.io/API-tests/127//#testresult/a801f3d79c9822a9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669613565243,"stop":1669613565950,"duration":707}},{"uid":"8fa63ac1a4e0255b","reportUrl":"https://golosin.github.io/API-tests/126//#testresult/8fa63ac1a4e0255b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669527113212,"stop":1669527113905,"duration":693}},{"uid":"3ae642de35cf305f","reportUrl":"https://golosin.github.io/API-tests/125//#testresult/3ae642de35cf305f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669440706589,"stop":1669440707299,"duration":710}},{"uid":"2694453c232f6db9","reportUrl":"https://golosin.github.io/API-tests/124//#testresult/2694453c232f6db9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669354350762,"stop":1669354351449,"duration":687}},{"uid":"2c30f2346a26d25e","reportUrl":"https://golosin.github.io/API-tests/123//#testresult/2c30f2346a26d25e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669267952493,"stop":1669267953197,"duration":704}},{"uid":"79e63dbf55ff669c","reportUrl":"https://golosin.github.io/API-tests/122//#testresult/79e63dbf55ff669c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669181593913,"stop":1669181595028,"duration":1115}},{"uid":"66d2e43422ab47a8","reportUrl":"https://golosin.github.io/API-tests/121//#testresult/66d2e43422ab47a8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669095316003,"stop":1669095318048,"duration":2045}},{"uid":"4cf9ac7ba6417a13","reportUrl":"https://golosin.github.io/API-tests/120//#testresult/4cf9ac7ba6417a13","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669008921438,"stop":1669008922640,"duration":1202}},{"uid":"f8fc884c95c12bba","reportUrl":"https://golosin.github.io/API-tests/119//#testresult/f8fc884c95c12bba","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668922479960,"stop":1668922481069,"duration":1109}},{"uid":"da60ab1f33409404","reportUrl":"https://golosin.github.io/API-tests/118//#testresult/da60ab1f33409404","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668836054195,"stop":1668836055329,"duration":1134}},{"uid":"fac271e3bc8f600","reportUrl":"https://golosin.github.io/API-tests/117//#testresult/fac271e3bc8f600","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668749696174,"stop":1668749697083,"duration":909}},{"uid":"a6a58757a87e3a49","reportUrl":"https://golosin.github.io/API-tests/116//#testresult/a6a58757a87e3a49","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668663326152,"stop":1668663327068,"duration":916}},{"uid":"3af47bf988a2db70","reportUrl":"https://golosin.github.io/API-tests/115//#testresult/3af47bf988a2db70","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668576877422,"stop":1668576878550,"duration":1128}},{"uid":"53d4816979e4fa9","reportUrl":"https://golosin.github.io/API-tests/114//#testresult/53d4816979e4fa9","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668490462078,"stop":1668490462953,"duration":875}},{"uid":"d9c87dab53a1c9fc","reportUrl":"https://golosin.github.io/API-tests/113//#testresult/d9c87dab53a1c9fc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668404588654,"stop":1668404589363,"duration":709}},{"uid":"8ece07c969a30be8","reportUrl":"https://golosin.github.io/API-tests/112//#testresult/8ece07c969a30be8","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668317855167,"stop":1668317856281,"duration":1114}},{"uid":"d50922517753071a","reportUrl":"https://golosin.github.io/API-tests/111//#testresult/d50922517753071a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668231400929,"stop":1668231401621,"duration":692}},{"uid":"4da5ed96c544ffa3","reportUrl":"https://golosin.github.io/API-tests/110//#testresult/4da5ed96c544ffa3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668145240248,"stop":1668145241289,"duration":1041}},{"uid":"60db5df0880b6aa2","reportUrl":"https://golosin.github.io/API-tests/109//#testresult/60db5df0880b6aa2","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1668058942942,"stop":1668058943829,"duration":887}},{"uid":"c942b08ea1ae5000","reportUrl":"https://golosin.github.io/API-tests/108//#testresult/c942b08ea1ae5000","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667972722512,"stop":1667972723211,"duration":699}}]},"tags":[]},"source":"1d1936a20974b21e.json","parameterValues":["'FEED'"]}