{"uid":"ab621f3a91372b20","name":"Brand","fullName":"test_function.test_filters.test_5_filters_category#test_get_filters_category_feed_pm","historyId":"89764c0620f8a4cd02275f46d5feb195","time":{"start":1667712881577,"stop":1667712882278,"duration":701},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_category_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_category = response_body['data']['products']['pageInfo']['filters'][16]['widget']['attrs'][1]['value']\n        elif representation == 'WILDBERRIES':\n>           token_category = response_body['data']['products']['pageInfo']['filters'][17]['widget']['attrs'][1]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_5_filters_category.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Фильтры"},{"name":"story","value":"Фильтр по \"Brand\""},{"name":"severity","value":"critical"},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_5_filters_category"},{"name":"host","value":"fv-az47-358"},{"name":"thread","value":"2441-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_5_filters_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":60,"skipped":0,"passed":0,"unknown":0,"total":60},"items":[{"uid":"bac322332e2cec7e","reportUrl":"https://golosin.github.io/API-tests/104//#testresult/bac322332e2cec7e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667626484758,"stop":1667626485478,"duration":720}},{"uid":"2300d5673b27a58e","reportUrl":"https://golosin.github.io/API-tests/103//#testresult/2300d5673b27a58e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667540461853,"stop":1667540462749,"duration":896}},{"uid":"36b3be337ae0e35e","reportUrl":"https://golosin.github.io/API-tests/102//#testresult/36b3be337ae0e35e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667454021087,"stop":1667454022017,"duration":930}},{"uid":"22e1a7180c68d415","reportUrl":"https://golosin.github.io/API-tests/101//#testresult/22e1a7180c68d415","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667368625095,"stop":1667368625805,"duration":710}},{"uid":"d4f6e165da30a837","reportUrl":"https://golosin.github.io/API-tests/100//#testresult/d4f6e165da30a837","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667282442765,"stop":1667282443465,"duration":700}},{"uid":"60e3015d4737c45f","reportUrl":"https://golosin.github.io/API-tests/99//#testresult/60e3015d4737c45f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667195442857,"stop":1667195443733,"duration":876}},{"uid":"7a7817439649d725","reportUrl":"https://golosin.github.io/API-tests/98//#testresult/7a7817439649d725","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667108564826,"stop":1667108565726,"duration":900}},{"uid":"e45862160f786f18","reportUrl":"https://golosin.github.io/API-tests/97//#testresult/e45862160f786f18","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1667022073020,"stop":1667022073904,"duration":884}},{"uid":"812bfec55b8bfcc7","reportUrl":"https://golosin.github.io/API-tests/96//#testresult/812bfec55b8bfcc7","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666935999917,"stop":1666936000825,"duration":908}},{"uid":"3ed529dde456541e","reportUrl":"https://golosin.github.io/API-tests/95//#testresult/3ed529dde456541e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666849495024,"stop":1666849495738,"duration":714}},{"uid":"5249335656719200","reportUrl":"https://golosin.github.io/API-tests/94//#testresult/5249335656719200","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666763273567,"stop":1666763274269,"duration":702}},{"uid":"36b6c82dbbaa6279","reportUrl":"https://golosin.github.io/API-tests/93//#testresult/36b6c82dbbaa6279","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666679851385,"stop":1666679852096,"duration":711}},{"uid":"8b8ebb8db57d8597","reportUrl":"https://golosin.github.io/API-tests/92//#testresult/8b8ebb8db57d8597","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666593708927,"stop":1666593709612,"duration":685}},{"uid":"7757f50743af4c43","reportUrl":"https://golosin.github.io/API-tests/91//#testresult/7757f50743af4c43","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666504795983,"stop":1666504796710,"duration":727}},{"uid":"e11feebae92aecd3","reportUrl":"https://golosin.github.io/API-tests/90//#testresult/e11feebae92aecd3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666418285591,"stop":1666418286511,"duration":920}},{"uid":"3343607e84f070fd","reportUrl":"https://golosin.github.io/API-tests/89//#testresult/3343607e84f070fd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666332235125,"stop":1666332235830,"duration":705}},{"uid":"c5626439fffbed88","reportUrl":"https://golosin.github.io/API-tests/88//#testresult/c5626439fffbed88","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666245453491,"stop":1666245454194,"duration":703}},{"uid":"278331e73600086f","reportUrl":"https://golosin.github.io/API-tests/87//#testresult/278331e73600086f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666161763504,"stop":1666161764206,"duration":702}},{"uid":"f207e18748ef2891","reportUrl":"https://golosin.github.io/API-tests/86//#testresult/f207e18748ef2891","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666075156128,"stop":1666075156804,"duration":676}},{"uid":"1af0ea4bdc3b6363","reportUrl":"https://golosin.github.io/API-tests/85//#testresult/1af0ea4bdc3b6363","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665988667358,"stop":1665988668455,"duration":1097}}]},"tags":[]},"source":"ab621f3a91372b20.json","parameterValues":["'WILDBERRIES'"]}