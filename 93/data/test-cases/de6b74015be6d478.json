{"uid":"de6b74015be6d478","name":"Brand","fullName":"test_function.test_filters.test_4_filters_brand#test_get_filters_brand_feed_pm","historyId":"721fed86dac7424827c27c8f3be62f82","time":{"start":1666679848630,"stop":1666679849311,"duration":681},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES'\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Brand\"')\n    @allure.title('Brand')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_brand_feed_pm(representation):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n        if representation == 'FEED':\n            token_brand = response_body['data']['products']['pageInfo']['filters'][15]['widget']['attrs'][0]['value']\n        elif representation == 'WILDBERRIES':\n>           token_brand = response_body['data']['products']['pageInfo']['filters'][18]['widget']['attrs'][0]['value']\nE           KeyError: 'data'\n\ntest_function/test_filters/test_4_filters_brand.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"story","value":"Фильтр по \"Brand\""},{"name":"epic","value":"Тест стенд v.1.1.1"},{"name":"feature","value":"Фильтры"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_4_filters_brand"},{"name":"host","value":"fv-az628-278"},{"name":"thread","value":"2470-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_4_filters_brand"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":48,"skipped":0,"passed":0,"unknown":0,"total":48},"items":[{"uid":"de679457b73eb4f","reportUrl":"https://golosin.github.io/API-tests/92//#testresult/de679457b73eb4f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666593706151,"stop":1666593706839,"duration":688}},{"uid":"e0baf1ab6d49c35f","reportUrl":"https://golosin.github.io/API-tests/91//#testresult/e0baf1ab6d49c35f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666504793126,"stop":1666504793828,"duration":702}},{"uid":"bd4b2873b9c83bdc","reportUrl":"https://golosin.github.io/API-tests/90//#testresult/bd4b2873b9c83bdc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666418281659,"stop":1666418282819,"duration":1160}},{"uid":"5ae5ef7e95cd772a","reportUrl":"https://golosin.github.io/API-tests/89//#testresult/5ae5ef7e95cd772a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666332232195,"stop":1666332232896,"duration":701}},{"uid":"9335343acb8f25a5","reportUrl":"https://golosin.github.io/API-tests/88//#testresult/9335343acb8f25a5","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666245450502,"stop":1666245451191,"duration":689}},{"uid":"e2838e53217ed464","reportUrl":"https://golosin.github.io/API-tests/87//#testresult/e2838e53217ed464","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666161760702,"stop":1666161761384,"duration":682}},{"uid":"26e093e16cd2cc5c","reportUrl":"https://golosin.github.io/API-tests/86//#testresult/26e093e16cd2cc5c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1666075153376,"stop":1666075154066,"duration":690}},{"uid":"c1d9ab37115ec73b","reportUrl":"https://golosin.github.io/API-tests/85//#testresult/c1d9ab37115ec73b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665988662893,"stop":1665988664019,"duration":1126}},{"uid":"54958308ac81e471","reportUrl":"https://golosin.github.io/API-tests/84//#testresult/54958308ac81e471","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665899931587,"stop":1665899932282,"duration":695}},{"uid":"56ef933f64db7771","reportUrl":"https://golosin.github.io/API-tests/83//#testresult/56ef933f64db7771","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665813741093,"stop":1665813741947,"duration":854}},{"uid":"e45c7300fa5ed8f6","reportUrl":"https://golosin.github.io/API-tests/82//#testresult/e45c7300fa5ed8f6","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665729133246,"stop":1665729133961,"duration":715}},{"uid":"3acca0f72e718b08","reportUrl":"https://golosin.github.io/API-tests/81//#testresult/3acca0f72e718b08","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665641743311,"stop":1665641744014,"duration":703}},{"uid":"9e3f74ffc8fb4c50","reportUrl":"https://golosin.github.io/API-tests/80//#testresult/9e3f74ffc8fb4c50","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665554511372,"stop":1665554512471,"duration":1099}},{"uid":"ca5a1c864b23f64b","reportUrl":"https://golosin.github.io/API-tests/79//#testresult/ca5a1c864b23f64b","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665469420790,"stop":1665469421489,"duration":699}},{"uid":"d31bdd71d7173590","reportUrl":"https://golosin.github.io/API-tests/78//#testresult/d31bdd71d7173590","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665383168452,"stop":1665383169193,"duration":741}},{"uid":"939a66ab4a515cf0","reportUrl":"https://golosin.github.io/API-tests/77//#testresult/939a66ab4a515cf0","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665294932095,"stop":1665294932962,"duration":867}},{"uid":"1321c3972d0014a3","reportUrl":"https://golosin.github.io/API-tests/76//#testresult/1321c3972d0014a3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665208221232,"stop":1665208222092,"duration":860}},{"uid":"60378ac8451a1a69","reportUrl":"https://golosin.github.io/API-tests/75//#testresult/60378ac8451a1a69","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665122044851,"stop":1665122045534,"duration":683}},{"uid":"23a3886475f1904","reportUrl":"https://golosin.github.io/API-tests/74//#testresult/23a3886475f1904","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1665035906351,"stop":1665035907041,"duration":690}},{"uid":"31be52c5507607bc","reportUrl":"https://golosin.github.io/API-tests/73//#testresult/31be52c5507607bc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1664949879237,"stop":1664949879918,"duration":681}}]},"tags":[]},"source":"de6b74015be6d478.json","parameterValues":["'WILDBERRIES'"]}