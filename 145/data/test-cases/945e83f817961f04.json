{"uid":"945e83f817961f04","name":"Stock","fullName":"test_function.test_filters.test_2_filters_stock#test_get_filters_stock_feed_pm","historyId":"b1ad4e9b518d5e42ac697e9a109c8071","time":{"start":1671168691431,"stop":1671168692852,"duration":1421},"status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"representation = 'WILDBERRIES', stock_min = 2, stock_max = None\n\n    @allure.epic('Тест стенд v.'+get_app_version())\n    @allure.feature('Фильтры')\n    @allure.story('Фильтр по \"Stock')\n    @allure.title('Stock')\n    @allure.severity('critical')\n    @pytest.mark.parametrize(\"stock_min, stock_max\", [(2, 2), (None, 2), (2, None)])\n    @pytest.mark.parametrize(\"representation\", [\"FEED\", \"WILDBERRIES\"])\n    def test_get_filters_stock_feed_pm(representation, stock_min, stock_max):\n    \n        x = open(os.path.join(r\"query\", \"query products.txt\"))\n        body = ''.join(x)\n    \n        headers = {\"Content-Type\": \"application/json; charset=utf-8\",\n                   \"authorization\": \"JWT \" + get_singIn()}\n        url = get_url()\n        response = requests.post(url, headers=headers, json={'operationName': \"products\",\n                                                             'variables': {\n                                                                \"slice\": {\"offset\": 0, \"limit\": 25},\n                                                                    \"pipelineId\": get_id_pipeline(),\n                                                                    \"filters\": {\n                                                                    \"stockMin\": stock_min,\n                                                                    \"stockMax\": stock_max\n                                                                    },\n                                                                    \"representation\": representation\n                                                                },\n                                                             'query': body})\n        response_body = response.json()\n    \n>       items_product = response_body['data']['products']['items']\nE       KeyError: 'data'\n\ntest_function/test_filters/test_2_filters_stock.py:36: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"Фильтры"},{"name":"epic","value":"Тест стенд v.1.1.2.1"},{"name":"story","value":"Фильтр по \"Stock"},{"name":"parentSuite","value":"test_function.test_filters"},{"name":"suite","value":"test_2_filters_stock"},{"name":"host","value":"fv-az440-119"},{"name":"thread","value":"2485-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_function.test_filters.test_2_filters_stock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"representation","value":"'WILDBERRIES'"},{"name":"stock_max","value":"None"},{"name":"stock_min","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":100,"skipped":0,"passed":0,"unknown":0,"total":100},"items":[{"uid":"9e477ce1099fa0e4","reportUrl":"https://golosin.github.io/API-tests/144//#testresult/9e477ce1099fa0e4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1671082315299,"stop":1671082316303,"duration":1004}},{"uid":"4a639d24b9330e62","reportUrl":"https://golosin.github.io/API-tests/143//#testresult/4a639d24b9330e62","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670995899266,"stop":1670995900452,"duration":1186}},{"uid":"6397626960e8503e","reportUrl":"https://golosin.github.io/API-tests/142//#testresult/6397626960e8503e","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670909493943,"stop":1670909494811,"duration":868}},{"uid":"98810ade6d21178f","reportUrl":"https://golosin.github.io/API-tests/141//#testresult/98810ade6d21178f","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670823083175,"stop":1670823083979,"duration":804}},{"uid":"85b2a23dcd537f79","reportUrl":"https://golosin.github.io/API-tests/140//#testresult/85b2a23dcd537f79","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670736687354,"stop":1670736688177,"duration":823}},{"uid":"bbd85378f3ddb726","reportUrl":"https://golosin.github.io/API-tests/139//#testresult/bbd85378f3ddb726","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670650308076,"stop":1670650309297,"duration":1221}},{"uid":"830c18eb310d3bee","reportUrl":"https://golosin.github.io/API-tests/138//#testresult/830c18eb310d3bee","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670563890266,"stop":1670563891289,"duration":1023}},{"uid":"ec037c00b1dcd3dd","reportUrl":"https://golosin.github.io/API-tests/137//#testresult/ec037c00b1dcd3dd","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670477485845,"stop":1670477486670,"duration":825}},{"uid":"f5ae57a410a372dc","reportUrl":"https://golosin.github.io/API-tests/136//#testresult/f5ae57a410a372dc","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670391087879,"stop":1670391088725,"duration":846}},{"uid":"14aa1fb25b430ee4","reportUrl":"https://golosin.github.io/API-tests/135//#testresult/14aa1fb25b430ee4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670304724540,"stop":1670304725427,"duration":887}},{"uid":"4aeda3d37851965c","reportUrl":"https://golosin.github.io/API-tests/134//#testresult/4aeda3d37851965c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670218309998,"stop":1670218310924,"duration":926}},{"uid":"5e1aa2fe6882f983","reportUrl":"https://golosin.github.io/API-tests/133//#testresult/5e1aa2fe6882f983","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670131892296,"stop":1670131893337,"duration":1041}},{"uid":"d6ca9ee9e50c3bd3","reportUrl":"https://golosin.github.io/API-tests/132//#testresult/d6ca9ee9e50c3bd3","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1670045492331,"stop":1670045493183,"duration":852}},{"uid":"606af229f4a8556c","reportUrl":"https://golosin.github.io/API-tests/131//#testresult/606af229f4a8556c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669959112988,"stop":1669959114000,"duration":1012}},{"uid":"c5cbf773b1b91e1a","reportUrl":"https://golosin.github.io/API-tests/130//#testresult/c5cbf773b1b91e1a","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669872835893,"stop":1669872837018,"duration":1125}},{"uid":"9c092d6df95b8d28","reportUrl":"https://golosin.github.io/API-tests/129//#testresult/9c092d6df95b8d28","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669786391331,"stop":1669786392696,"duration":1365}},{"uid":"1cac7917125871c","reportUrl":"https://golosin.github.io/API-tests/128//#testresult/1cac7917125871c","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669699960661,"stop":1669699961759,"duration":1098}},{"uid":"bc60217ad8c4bd49","reportUrl":"https://golosin.github.io/API-tests/127//#testresult/bc60217ad8c4bd49","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669613554462,"stop":1669613555176,"duration":714}},{"uid":"ee4b9d4be61c76b4","reportUrl":"https://golosin.github.io/API-tests/126//#testresult/ee4b9d4be61c76b4","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669527102710,"stop":1669527103418,"duration":708}},{"uid":"692e75018ac82c0d","reportUrl":"https://golosin.github.io/API-tests/125//#testresult/692e75018ac82c0d","status":"broken","statusDetails":"KeyError: 'data'","time":{"start":1669440695668,"stop":1669440696373,"duration":705}}]},"tags":[]},"source":"945e83f817961f04.json","parameterValues":["'WILDBERRIES'","None","2"]}